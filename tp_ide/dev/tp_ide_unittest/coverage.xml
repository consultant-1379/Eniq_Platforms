<?xml version="1.0" encoding="UTF-8"?>

<project name="cobertura.examples.basic" default="coverage" basedir=".">

	<echo message="${ant.version}">
	</echo>

	<description>
		Cobertura - http://cobertura.sourceforge.net/ Copyright (C) 2003
		jcoverage ltd. Copyright (C) 2005 Mark Doliner
		&lt;thekingant@users.sourceforge.net&gt; Cobertura is licensed
		under the GNU General Public License Cobertura comes with
		ABSOLUTELY NO WARRANTY
	</description>

	<property file="build.properties" />

	<!-- ENIQ Jars -->
	<property name="eniq.3gpp32435.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/3GPP32435" />
	<property name="eniq.alarm.dir" value="${view.dir}/vobs/eniq/design/plat/alarm_module/build/alarm_module" />
	<property name="eniq.ascii.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/ascii" />
	<property name="eniq.asn1.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/asn1" />
	<property name="eniq.common.dir" value="${view.dir}/vobs/eniq/design/plat/common_utilities/build/common_utilities" />
	<property name="eniq.csexport.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/csexport" />
	<property name="eniq.ebs.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/ebs" />
	<property name="eniq.engine.dir" value="${view.dir}/vobs/eniq/design/plat/etl_controller/build/engine" />
	<property name="eniq.mdc.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/mdc" />
	<property name="eniq.nossdb.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/nossdb" />
	<property name="eniq.parser.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/parser" />
	<property name="eniq.sasn.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/sasn" />
	<property name="eniq.scheduler.dir" value="${view.dir}/vobs/eniq/design/plat/etl_controller/build/scheduler" />
	<property name="eniq.stfiop.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/stfiop" />
	<property name="eniq.xml.dir" value="${view.dir}/vobs/eniq/design/plat/adapters/build/xml" />

	<property name="eniq.dwhmanager.dir" value="${view.dir}/vobs/eniq/design/plat/management/build/dwh_manager" />
	<property name="eniq.export.dir" value="${view.dir}/vobs/eniq/design/plat/mediation/build/export" />
	<property name="eniq.repository.dir" value="${view.dir}/vobs/eniq/design/plat/installer/build/repository" />
	<property name="eniq.installer.dir" value="${view.dir}/vobs/eniq/design/plat/installer/build/installer" />

	<!-- DC5000 Jars -->
	<property name="eniq.alcatellucent.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/3pp/dc5000" />
	<property name="eniq.ct.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/3pp/dc5000" />
	<property name="eniq.spf.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/3pp/dc5000" />

	<!-- 3PP Jars -->
	<property name="3pp.ant.dir" value="${view.dir}/vobs/eniq/3pp/apache/ant/v1_6_2/prod" />
	<property name="3pp.dbunit.dir" value="${view.dir}/vobs/eniq/3pp/dbunit/dbunit/v2_1/prod" />
	<property name="3pp.hsqldb.dir" value="${view.dir}/vobs/eniq/3pp/hsqldb/prod" />
	<property name="3pp.jcalendar.dir" value="${view.dir}/vobs/eniq/3pp/toedter/jcalendar/prod" />
	<property name="3pp.jconn3.dir" value="${view.dir}/vobs/eniq/3pp/sybase/sybase_iq/v12_7/client/prod" />
	<property name="3pp.sybase.dir" value="${view.dir}/vobs/eniq/3pp/sybase/sybase_iq/v12_7/client/prod" />
	<property name="3pp.appframework.dir" value="${view.dir}/vobs/eniq/3pp/appframework/prod" />
	<property name="3pp.swingworker.dir" value="${view.dir}/vobs/eniq/3pp/idk/swing_worker/prod" />
	<property name="3pp.velocity.dir" value="${view.dir}/vobs/eniq/3pp/apache/jakarta_velocity/v1_5/prod" />
	<property name="3pp.xerces.dir" value="${view.dir}/vobs/eniq/3pp/apache/xerces_parser/v2_6_2/prod" />
	<property name="3pp.xmlapi.dir" value="${view.dir}/vobs/eniq/3pp/apache/xml_commons/v1_1/prod" />

	<!-- TPIDE Components -->
	<property name="tpide.ttc.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/build/table_tree_component" />
	<property name="tpide.pdc.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/build/parser_debugger_component" />

	<!-- 3pp Test components -->
	<property name="3pp.slf4j.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/3pp/slf4j-1.5.6" />

	<!-- Test components -->
	<property name="eniq.unittesting.dir" value="${view.dir}/vobs/eniq/design/plat/tp_ide/3pp/unittesting" />

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
		<fileset dir="${junit.dir}">
			<include name="junit.jar" />
		</fileset>

		<!-- Hamcrest needed to be separately included, since does not come with junit -->
		<fileset dir="${hamcrest.dir}">
			<include name="org.hamcrest.core_1.1.0.v20090501071000.jar" />
		</fileset>

		<!-- dbunit 2.3.0 or later is needed in unittesting -->
		<fileset dir="${dbunit.dir}">
			<include name="dbunit-2.3.0.jar" />
		</fileset>

		<fileset dir="${eniq.3gpp32435.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.alarm.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.alcatellucent.dir}">
			<include name="**/alcatellucent.jar" />
		</fileset>
		<fileset dir="${3pp.appframework.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.ascii.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.asn1.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.common.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.csexport.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.ct.dir}">
			<include name="**/ct.jar" />
		</fileset>
		<fileset dir="${eniq.dwhmanager.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.ebs.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.engine.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.export.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.mdc.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.nossdb.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.parser.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.repository.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.sasn.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.scheduler.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.spf.dir}">
			<include name="**/spf.jar" />
		</fileset>
		<fileset dir="${eniq.stfiop.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.unittesting.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.xml.dir}">
			<include name="**/*.jar" />
		</fileset>

		<!-- Exclude old ant, because it causes problems			
			<fileset dir="${3pp.ant.dir}">
				<include name="**/*.jar" />
			</fileset>
-->
		<!-- Exclude old dbunit, since newer is needed in unit testing			
			<fileset dir="${3pp.dbunit.dir}">
				<include name="**/*.jar" />
			</fileset>
-->
		<fileset dir="${3pp.hsqldb.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.jcalendar.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.jconn3.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.swingworker.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.sybase.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.velocity.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.xerces.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.xmlapi.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${eniq.installer.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${tpide.ttc.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${tpide.pdc.dir}">
			<include name="**/*.jar" />
		</fileset>

		<fileset dir="${fest.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${3pp.slf4j.dir}">
			<include name="**/*.jar" />
		</fileset>

		<fileset dir="${srcfiles.dir}">
			<include name="lib/**/*.jar" />
		</fileset>
		
		<!-- Include tpide jar to get the properties and images -->
		<fileset dir="${view.dir}/vobs/eniq/design/plat/tp_ide/build/tp_ide">
			<include name="**/techpackide.jar" />
		</fileset>

	</path>
	
	<path id="excludes.path">
		<!-- Exclude the stubbed engine and scheduler classes -->
		<fileset dir="${view.dir}/vobs/eniq/design/plat/tp_ide/dev/tp_ide_unittest/bin/com/ericsson/eniq/techpacksdk/datamodel">
			<exclude name="**/*.java" />
		</fileset>
	</path>
	
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<target name="init">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

	<target name="compile" depends="init">
		<!--
		<javac srcdir="${srcfiles.dir}" destdir="${classes.dir}" debug="yes">
			<classpath refid="cobertura.classpath" />
		</javac>
		-->
		<!-- ADDED source, debug=true and debuglevel -parameters -->
		<echo message="Starting to compile with java.version=${java.version}">
		</echo>
		<javac srcdir="${tpide.dir}:${srcfiles.dir}" source="1.6" destdir="${classes.dir}" debug="true" debuglevel="lines,vars,source">
			<classpath refid="cobertura.classpath" />
			<exclude name="**/Engine.java"/>
			<exclude name="**/Scheduler.java"/>
		</javac>
	</target>

	<target name="instrument" depends="init,compile">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser" />
		<delete dir="${instrumented.dir}" />

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="${instrumented.dir}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${classes.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<!-- ##CHANGE##REPLACE -->
				<!--include name="**/*.class" /-->
				<!-- ##CHANGE##WITH -->
				<include name="**/*.class*" />
				<!-- ##CHANGE##REPLACE -->

				<exclude name="**/*Test*.class" />

				<!-- <exclude name="*ssc/rockfactory/*.class" /> -->
				<!-- <exclude name="*testTreesInTree/*.class" /> -->
				<exclude name="*unittest/*.class" />
				<!--##CHANGE##ADD.. Remove unittest-stuff from coverage -->
				<exclude name="**/unittest/**/*.class" />
				<!--##CHANGE##ADD -->
				<!-- <exclude name="*startType/*.class" /> -->
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test" depends="init,compile">

		<!--
	  Create directory for basic report stuff
	  -->
		<mkdir dir="${unittest.basic.report.dir}" />

		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
			<!--
				<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<jvmarg value="-Xms384M" />
			<jvmarg value="-Xmx1024M" />
			<classpath location="${instrumented.dir}" />
			<classpath location="${classes.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<!--test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />-->
			<!--test name="${testcase}" /-->
			<!--<batchtest todir="${reports.xml.dir}" unless="testcase">-->

			<!--
			 Run Tests and put basic report xmls to it's own dir
			 where they are read by junitreport-task
			-->
			<batchtest todir="${unittest.basic.report.dir}">
				<fileset dir="${src.dir}">

					<!-- ##CHANGE##REPLACE... -->
					<include name="**/*Test.java" />
					<!-- ##CHANGE##WITH TEMPORARY TESTING STUFF-->
					<!--include name="**/SetsActionsSchedulingsViewTest.java" /-->
					<!--include name="**/UniverseParametersViewTest.java" /-->
					<!-- ##CHANGE##REPLACE -->

				</fileset>
			</batchtest>
		</junit>

		<antcall target="junit-report">
		</antcall>

	</target>


	<target name="_run-specified-set-of-tests-only" description="Runs tests without init and compiling.">
		<!--  This is now used to re-run some totally failed test to
	           get maximum code coverage. (Running all tests again takes 
	           far too much time)  
	    -->


		<!--
	    Create directory for basic report stuff
	    -->
		<mkdir dir="${unittest.basic.report.dir}" />

		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
			<!--
	        <junit fork="yes" dir="${basedir}" failureProperty="test.failed">
	        Note the classpath order: instrumented classes are before the
	        original (uninstrumented) classes.  This is important.
	      -->
			<jvmarg value="-Xms384M" />
			<jvmarg value="-Xmx1024M" />
			<classpath location="${instrumented.dir}" />
			<classpath location="${classes.dir}" />

			<!--
	        The instrumented classes reference classes used by the
	        Cobertura runtime, so Cobertura and its dependencies
	        must be on your classpath.
	      -->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />

			<!--
	       Run Tests and put basic report xmls to it's own dir
	       where they are read by junitreport-task
	      -->
			<batchtest todir="${unittest.basic.report.dir}">
				<fileset dir="${src.dir}">

					<!-- Specify here the tests you want to run -->
					<include name="**/ManageTechPackViewTest.java" />

				</fileset>
			</batchtest>
		</junit>

		<!-- 	
	    <antcall target="junit-report"></antcall>
      -->

	</target>



	<target name="junit-report">
		<echo level="info">Starting to create junit report using TEST-*.xml -files from unittest.basic.report.dir=${unittest.basic.report.dir}</echo>
		<junitreport todir="${reports.xml.dir}">

			<!-- 
        Junit XML-files 
      -->
			<fileset dir="${unittest.basic.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>

			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>

	</target>


	<target name="coverage-check">
		<cobertura-check branchrate="34" totallinerate="100" />
	</target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

	<target name="alternate-coverage-report">
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report destdir="${coverage.html.dir}">
			<fileset dir="${srcfiles.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${tpide.dir}/src">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>

	<target name="clean" description="Remove all files created by the build/test process.">
		<delete dir="${classes.dir}" />
		<delete dir="${instrumented.dir}" />
		<delete dir="${reports.dir}" />
		<delete dir="${unittest.basic.report.dir}" />
		<delete file="cobertura.log" />
		<delete file="cobertura.ser" />
	</target>

	<target name="coverage" depends="compile,instrument,test,coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports." />
</project>
