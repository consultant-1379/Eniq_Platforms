#!/usr/bin/bash
# ***********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ***********************************************************************
#
# (c) Ericsson Radio Systems AB 2013 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used 
# and/or copied only with the written permission from Ericsson Radio 
# Systems AB or in accordance with the terms and conditions stipulated 
# in the agreement/contract under which the program(s) have been 
# supplied.
#
# ***********************************************************************
# Name    : monitor_heap.sh
# Revision: main/at_eniq/1
# Purpose : This script will count the heap usage of Engine and Scheduler
# 
# The script will save data for each min.
#
# Usage   : monitor_heap.sh
#
# ***********************************************************************
# Anirudh Bhat (anirudh.bhat@wipro.com)
# ***********************************************************************

# ***********************************************************************
#Global variable
# ***********************************************************************
SYBASE=/eniq/sybase_iq
export SYBASE

CONF_DIR=/eniq/sw/conf
NAWK=/usr/bin/nawk
DATE=/usr/bin/date
ECHO=/usr/bin/echo
GREP=/usr/bin/grep
IQISQL=/eniq/sybase_iq/OCS-15_0/bin//eniq/sybase_iq/OCS-15_0/bin/iqisql
export IQISQL

DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"
export DBISQL
if [ ! -x "$DBISQL" ]; then
    $ECHO "$DBISQL command not found or not executable."
    exit 1
fi

if [ -s /eniq/admin/lib/common_functions.lib ]; then
    . /eniq/admin/lib/common_functions.lib
else
    $ECHO "Could not find /eniq/admin/lib/common_functions.lib"
    exit 1
fi

LOGSFILE=/eniq/log/sw_log/iq/dwhdb/logscheck.log
export LOGSFILE

SQLANY=/eniq/sql_anywhere
export SQLANY

. ${SYBASE}/IQ.sh

# Internal directory variable

CONF_DIR=/eniq/sw/conf
export CONF_DIR

BIN_DIR=/eniq/sw/bin
export BIN_DIR

RT_DIR=/eniq/sw/runtime
export RT_DIR

# ASN.1 library stuff
OSS_ASN1_JAVA="${RT_DIR}/nokalva/asn1pjav/solaris.tgt/3.0"
export OSS_ASN1_JAVA

OSSINFO=${OSS_ASN1_JAVA}
export OSSINFO

# Path extension
PATH=${PATH}:${OSS_ASN1_JAVA}:/usr/local/bin:${BIN_DIR}
export PATH

LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${OSS_ASN1_JAVA}/lib:${SQLANY}/lib64
export LD_LIBRARY_PATH


if [ -z "${CONF_DIR}" ] ; then
  echo "ERROR: CONF_DIR is not set"
  exit 1
fi

. ${CONF_DIR}/niq.rc

_dir_=`/usr/bin/dirname $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || echo $_dir_`

JAVA_HOME="/eniq/sw/runtime/java"

CPATH="${PLATFORM_DIR}"

DIRS=`ls ${PLATFORM_DIR}`

for file in ${DIRS}
do
  if [ -d ${PLATFORM_DIR}/${file}/dclib ]
  then
    JARS=`ls ${PLATFORM_DIR}/${file}/dclib/*.jar`

    for jar in ${JARS}
    do
      CPATH="${CPATH}:${jar}"
    done
  fi
done

DCPASSWORD=`inigetpassword DWH -v DCPassword -f ${CONF_DIR}/niq.ini`

#
#Initalizing 
#
_date1_=`$DATE +%d`
_time1_=`$DATE '+%T'`
_time2_="01:00:00"

_htime_=`date '+%H'`
_mtime_=`date '+%M'`
_time_=`date '+%H:%M'`
_date_=`date '+%Y-%m-%d'`


#
# log file name
#
touch /eniq/log/sw_log/scheduler/schedulerHeap-$_date_.log
touch /eniq/log/sw_log/engine/engineHeap-$_date_.log
SCHEDULER_LOG_FILE="/eniq/log/sw_log/scheduler/schedulerHeap-$_date_.log"
ENGINE_LOG_FILE="/eniq/log/sw_log/engine/engineHeap-$_date_.log"

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#

# create temporary table to keep record 
# - if required table "monitor_heap" already present it will not create again
# - if the table is not present but script is not able to create the table it will throw an error and exit
flag=`$DBISQL -c "eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dc;pwd=$DCPASSWORD" -nogui -onerror exit "select count(*) as row from sysobjects where name = 'Monitor_heap'" 2>&1`
dbErrCode=$?
if [[ $dbErrCode -ne 0 ]]; then
$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Could retrieve data from sysobjects table - exiting with error code: $dbErrCode" >> ${LOGSFILE}
else
flag=`$ECHO "$flag" | $GREP "[0-9]" | $GREP -v row | $GREP -v time | tr -d ' '`
fi
if [ $flag -eq 0 ] && [ $dbErrCode -eq 0 ]; then
$ECHO "Need to create the table "
$ECHO "creating table"
$IQISQL -Udc -P$DCPASSWORD -Sdwhdb -i /eniq/sw/bin/create_engine_heap.sql --retserverror > /dev/null 2>&1
dbErrCode=$?
if [[ $dbErrCode -ne 0 ]]; then
$ECHO "Could create the table - exiting with error code: $dbErrCode" >> ${LOGSFILE}
else
$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Monitor_heap table got created successfully." >> ${LOGSFILE}
fi
fi

#To get the Process Id of Scheduler and heap usage.
Scheduler_PID=`ssh dcuser@scheduler ps -eaf | $GREP -i ETLCScheduler| $GREP -i java | $NAWK '{print $2}'`
Scheduler_Heap=`ssh dcuser@scheduler $JAVA_HOME/bin/jmap -heap -d64 $Scheduler_PID 2>/dev/null | tr -d ' ' | $GREP "used=" | $NAWK -F'(' '/(\d+)/{ print $2}' | $NAWK -F'M' '{sum += $1} END {print sum}'`

#To get the Process Id of Engine and heap usage.
Engine_PID=`ssh dcuser@engine ps -eaf | $GREP -i ETLCengine| $GREP -i java | $NAWK '{print $2}'`
Engine_Heap=`ssh dcuser@engine $JAVA_HOME/bin/jmap -heap -d64 $Engine_PID 2>/dev/null | tr -d ' ' | $GREP "used=" | $NAWK -F'(' '/(\d+)/{ print $2}' | $NAWK -F'M' '{sum += $1} END {print sum}'`

$ECHO "Heap usage for $_htime_:$_mtime_ :$Scheduler_Heap" >> $SCHEDULER_LOG_FILE
$ECHO "Heap usage for $_htime_:$_mtime_ :$Engine_Heap" >> $ENGINE_LOG_FILE

#Insert into DataBase
$DBISQL -c "eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dc;pwd=$DCPASSWORD" -onerror exit -nogui "INSERT INTO DC.Monitor_Heap(DATETIMEID, ROP,SCHEDULER_HEAP_USAGE,ENGINE_HEAP_USAGE) VALUES ('$_date_', '$_htime_:$_mtime_', '$Scheduler_Heap', '$Engine_Heap')" >/dev/null 2>&1 
dbErrCode=$?
if [[ $dbErrCode -ne 0 ]]; then
$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Could not update the heap usage into the Monitor_Heap table - exiting with error code: $dbErrCode" >> ${LOGSFILE}
fi
#Deleting data older than 2 years from "DC.Monitor_Heap" 
if [[ _date1_ -eq 07 ]] || [[ _date1_ -eq 14 ]] || [[ _date1_ -eq 21 ]] || [[ _date1_ -eq 28 ]] && [[ "$_time1_" == "$_time2_" ]];then
	oldDataCount=`$DBISQL -c "eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dc;pwd=$DCPASSWORD" -onerror exit -nogui "SELECT count(*) as row FROM DC.Monitor_Heap WHERE DATETIMEID<dateadd(year, -2, NOW())" 2>&1`
	dbErrCode=$?
	if [[ $dbErrCode -ne 0 ]]; then
	$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Could not delete older data from Monitor_Heap table - exiting with error code: $dbErrCode" >> ${LOGSFILE}
	exit $dbErrCode
	else
	oldDataCount=`$ECHO "$oldDataCount" | $GREP "[0-9]" | $GREP -v row | $GREP -v time | tr -d ' '`
	fi
	if [ $oldDataCount -gt 0 ]; then
	$DBISQL -c "eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dc;pwd=$DCPASSWORD" -onerror exit -nogui "DELETE FROM DC.Monitor_Heap where DATETIMEID < dateadd(year, -2, NOW())" > /dev/null 2>&1
	dbErrCode=$?
	if [ $dbErrCode -eq 0 ]; then
	$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Data older than 2 years are deleted from DC.Monitor_Heap" >> ${LOGSFILE}
	else
	$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Could not delete older data from Monitor_Heap table - exiting with error code: $dbErrCode" >> ${LOGSFILE}
	fi
	fi
fi

exit 0
