#!/usr/sunos/bin/sh
# ----------------------------------------------------------------------
# Ericsson Network IQ Platform installer script
#
# Usage: platform_installer [-v] [-f] [-m|-u] PACKAGE
#
# ----------------------------------------------------------------------
# Copyright (c) 1999 - 2007 AB LM Ericsson Oy  All rights reserved.
# ----------------------------------------------------------------------

VERBOSE=0
FORCE="no"
PACKAGE=""
INSTALL_XML=""
MIGRATE="no"
HELP=0

while [ -n "$*" ] ; do
	if [ "$1" = "-v" ] ; then
		VERBOSE=1
	elif [ "$1" = "-f" ] || [ "$1" = "force" ] ; then
		FORCE="force"
	elif [ "$1" = "-m" ] ; then
		MIGRATE="migrate"
	elif [ "$1" = "-u" ] || [ "$1" = "update" ] ; then
		MIGRATE="update"	  
	elif [ "$1" = "-help" ] ; then
		HELP=1
	elif [ "$1" = "-x" ] ; then
		INSTALL_XML=$2
		shift
	else
		PACKAGE=$1 #default...
	fi
	shift
done

_echo(){
	echo ${*} | tee -a ${LOG_FILE}
}

_debug(){
	if [ $VERBOSE = 1 ] ; then
		_echo ${*}
	fi
}

CURR_DIR=`pwd`

if [ -z "${CONF_DIR}" ] ; then
  echo "ERROR: CONF_DIR is not set"
  exit 1
fi

if [ ! -r "${CONF_DIR}/niq.rc" ] ; then
  echo "ERROR: Source file is not readable at ${CONF_DIR}/niq.rc"
  exit 2
fi

. ${CONF_DIR}/niq.rc

TIMESTAMP=`date +%y.%m.%d_%H:%M:%S`

HSTNAME=`hostname`

usage()
{
   echo "Usage: platform_installer [-v] [-f] [-m|-u] [PACKAGE | -x $PLATFORM_DIR/_module_/install/install.xml"
   echo "Options:"
   echo "  -v  verbose output"
   echo "  -f  skip dependency check"
   echo "  -m  This is used only when migrating the repository data from Sybase IQ to Sybase Anywhere"
   echo "  -u  This is used only when updating the repdb in Sybase IQ with the"
   echo "      intention of later performing the Migration of the data (see above, -m option)"
   echo "  -x  The install.xml file to use"
}

if [ "${HELP}" = 1 ] ; then
   usage
   exit 127
fi

if [ -z "$INSTALL_XML" ] && [ -z "${PACKAGE}" ] ; then
   usage
   exit 127

fi

if [ "$INSTALL_XML" != "" ] ; then
	if [ ! -f $INSTALL_XML ] ; then
		_echo "$INSTALL_XML not found"
		exit 1
	fi
elif [ "$PACKAGE" != "" ] ; then
	if [ ! -f ${PACKAGE} ] ; then
		_echo "${CURR_DIR}/${PACKAGE}: No such file or directory"
		exit 1
	fi
	_zip_install_="-Dzip_install=true"
fi

if [ "$INSTALL_XML" != "" ] ; then
	_extract_dir_=`dirname $INSTALL_XML`
	_extract_dir_=`dirname $_extract_dir_`
	_package_=`basename $_extract_dir_` 
else #if [ $PACKAGE ] ; then
	if [ -d ${INSTALLER_DIR}/tmp ] ; then
		rm -rf ${INSTALLER_DIR}/tmp > /dev/null
	fi
	mkdir -p ${INSTALLER_DIR}/tmp
	cp $PACKAGE ${INSTALLER_DIR}/tmp/ > /dev/null
	unzip -d ${INSTALLER_DIR}/tmp $PACKAGE > /dev/null
	_extract_dir_=${INSTALLER_DIR}/tmp
	_package_=$PACKAGE
fi


if [ ! -d ${LOG_DIR}/platform_installer ] ; then
  mkdir -p ${LOG_DIR}/platform_installer > /dev/null
fi
LOGFILE=${LOG_DIR}/platform_installer/${_package_}_${TIMESTAMP}.log
_debug "===================================================================="
_debug "  Ericsson Network IQ platform installer @ ${HSTNAME}"
_debug "--------------------------------------------------------------------"
_debug " Installing: ${PACKAGE}"
_debug " Type: ${TYPE}"
_debug "===================================================================="




# Check to see if the package is already installed
# Default flow is to exit OK if the package version is already installed and the 
# FORCE flag is not set
# If the same version is installed and the FORCE flag is set, continue to do the install
_vprops_=$_extract_dir_/install/version.properties
if [ -f ${_vprops_} ] ; then
	new_version=`grep module.version ${_vprops_} | cut -d= -f2`
	new_build=`grep module.build ${_vprops_} | cut -d= -f2`
	module_name=`grep module.name ${_vprops_}| cut -d= -f2`
	version="${new_version}b${new_build}"
	vdb="module.${module_name}=${version}"
	grep ${vdb} ${INSTALLER_DIR}/versiondb.properties > /dev/null
	install_status=$?
	if [ ${install_status} -eq 0 ] ; then
		if [ "${FORCE}" = "force" ] ; then
			_echo "Module ${module_name} version ${version} already installed, forcing reinstall of same version."
		else
			_debug "Module ${module_name} version ${version} already installed."
			if [ "${PACKAGE}" != "" ] ; then
				rm -f ${PACKAGE}
				cd ${CURR_DIR}
				rm -rf tmp
			fi
			_echo "Successfully installed"
			exit 0
		fi
	else
		_echo "Installing ${module_name}_${version}"
	fi
fi

JAVA_HOME=${RT_DIR}/java
export JAVA_HOME

AS_JAVA=${RT_DIR}/java
export AS_JAVA

PATH=${RT_DIR}/java/bin:${PATH}
export PATH

# Create the classpath after extracting the package
CPATH="${INSTALLER_DIR}/lib/installer.jar"

DIRS=`ls ${PLATFORM_DIR}`

# Add the jars to the classpath after extraction
for file in $DIRS
do
  if [ -d ${PLATFORM_DIR}/$file/dclib ]
  then
    JARS=`ls ${PLATFORM_DIR}/$file/dclib/*.jar`
    for jar in $JARS
    do
      CPATH="${CPATH}:${jar}"
    done
  fi
done

_new_repo=${INSTALLER_DIR}/tmp/dclib/repository.jar
if [ -f ${_new_repo} ] ; then
	CPATH=${_new_repo}:${CPATH}
	echo "Using new version of ${_new_repo}"
fi

if [ "${PACKAGE}" != "" ] ; then
	cd ${INSTALLER_DIR}/tmp
fi

${RT_DIR}/ant/bin/ant -f ${INSTALLER_DIR}/tasks_platform_installer.xml -lib ${CPATH} \
	-Ddc.extract.dir=${_extract_dir_} $_zip_install_ \
	-Dclasspath=${CPATH} -Ddc.installer.dir=${INSTALLER_DIR} -Ddc.platform.dir=${PLATFORM_DIR} \
	-Ddc.bin.dir=${BIN_DIR} -Ddc.runtime.dir=${RT_DIR} -Ddc.conf.dir=${CONF_DIR} \
	-Dpmdata.dir=${PMDATA_DIR} -Darchive.dir=${ARCHIVE_DIR} -Detldata.dir=${ETLDATA_DIR} \
	-Dreference.dir=${REFERENCE_DIR} -Drejected.dir=${REJECTED_DIR} -Ddc.admin.bin=${ADMIN_BIN} \
	-Ddc.log.dir=${LOG_DIR} -Dforceflag=${FORCE} -Dmigrateflag=${MIGRATE} -Ddc.hostname=${HSTNAME} \
	-Deniq.hostdnsname=${HSTDNSNAME} -Dmz.home=${MZ_HOME} -Dmediation.inter=${MEDIATION_INTER} \
	-Ddc.glassfish.dir=${GLASSFISH_DIR} -Ddc.installconf.dir=${ENIQ_CONF_DIR} | tee -a ${LOGFILE}

if [ -f ${LOGFILE} ] ; then
  SUC=`cat ${LOGFILE} | grep "BUILD SUCCESSFUL"`
  if [ ! -z "${SUC}" ] ; then
    if [ ${MIGRATE} = "update" ] ; then
       _echo "Successfully Updated and Unloaded all tables from repdb (Sybase IQ)"
    elif [ ${MIGRATE} = "migrate" ] ; then
       _echo "Successfully Created and Loaded all tables to repdb (SQL Anywhere)"
    else
        if [ "$PACKAGE" != "" ] ; then
            cd ${CURR_DIR}
			rm -f ${PACKAGE}
			rm -rf $_extract_dir_
		fi
		_echo "Successfully installed"
    fi
  else
    _echo "Installation failed"
    exit 69
  fi
fi
