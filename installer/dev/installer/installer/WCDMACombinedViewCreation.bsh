#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2015 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : WCDMACombinedViewCreation
# Date    : 19/09/2016
# Purpose : Script to drop the existing G1 RBS view and recreate them 
#           as a combined view on G1 and G2 partitions.
# Usage   : WCDMACombinedViewCreation
#
# ********************************************************************
#
# Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CP=/usr/bin/cp
DATE=/usr/bin/date
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
FIND=/usr/bin/find
GEGREP=/usr/sfw/bin/gegrep
GREP=/usr/bin/grep
MKDIR=/usr/bin/mkdir
NAWK=/usr/bin/nawk
RM=/usr/bin/rm
SED=/usr/bin/sed
SU=/usr/bin/su
TOUCH=/usr/bin/touch
TEE=/usr/bin/tee
UNZIP=/usr/bin/unzip

STARTTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
LOGPATH=/eniq/log/sw_log/tp_installer
INSTALLER_DIR=/eniq/sw/installer
LOGFILE=${LOGPATH}/wcdma_combined_view_create_${STARTTIMESTAMP}.log
RBSVIEWSQL=${INSTALLER_DIR}/wcdma_view_sql
TMP=${INSTALLER_DIR}/temp_wcdma_view
TEMP=${INSTALLER_DIR}/temp_wcdma

DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"
CONF_DIR=/eniq/sw/conf

if [ -s /eniq/admin/lib/common_functions.lib ]; then
    . /eniq/admin/lib/common_functions.lib
else
        echo "Could not find /eniq/admin/lib/common_functions.lib"
        exit 1
fi

DWHDBPASSWORD=`inigetpassword DWH -v DCPassword -f ${CONF_DIR}/niq.ini`
DWHDB_PORT=`inigetpassword DWH -v PortNumber -f ${CONF_DIR}/niq.ini`
DWH_SERVER_NAME=`inigetpassword DWH -v ServerName -f ${CONF_DIR}/niq.ini`


DWHREPUSER=`inigetpassword REP -v DWHREPUsername -f ${CONF_DIR}/niq.ini`
DWHREPPASSWORD=`inigetpassword REP -v DWHREPPassword -f ${CONF_DIR}/niq.ini`
REP_PORT=`inigetpassword REP -v PortNumber -f ${CONF_DIR}/niq.ini`
REP_SERVER_NAME=`inigetpassword REP -v ServerName -f ${CONF_DIR}/niq.ini`
DBAPASSWORD=`inigetpassword DB -v UtilDBAPASSWORD -f ${CONF_DIR}/niq.ini`

if [ ! -x "$DBISQL" ]; then
    _err_msg_="$DBISQL commands not found or not executable."
    abort_script "$_err_msg_"
fi

$ECHO "Execution started at " $STARTTIMESTAMP >> ${LOGFILE}

if [ ! -d ${LOGPATH} ] ; then
  $MKDIR -p ${LOGPATH}
  $CHMOD 777 ${LOGPATH}
fi

if [ ! -d ${RBSVIEWSQL} ] ; then
  mkdir -p ${RBSVIEWSQL}
else
  rm -rf ${RBSVIEWSQL}
  mkdir -p ${RBSVIEWSQL}
  chmod 777 ${RBSVIEWSQL}
fi 

if [ ! -d ${TMP} ] ; then
  mkdir -p ${TMP}
  chmod 777 ${TMP}
else
  rm -rf ${TMP}
  mkdir -p ${TMP}
  chmod 777 ${TMP}
fi 

if [ ! -d ${TEMP} ] ; then
  mkdir -p ${TEMP}
  chmod 777 ${TEMP}
else
  rm -rf ${TEMP}
  mkdir -p ${TEMP}
  chmod 777 ${TEMP}
fi 


### Array Operations
### Argument : Array Element (Mo name)
contains()
{
flag=1
for i in "${tableAlaises[@]}"; do	
    if [[ ${i} == ${1} ]]; then
        flag=0;
		break;
	else 
		continue;
    fi
done
if [[ $flag -eq 0 ]]; then
	return 0;
else
	return 1;
fi
}

add()
{
contains $1
if [[ $? -eq 0 ]]; then
	xx=$1
else
	tableAlaises+=($1)
fi
}

dropRecreate()
{

log=$2
while IFS= read var
do

	sql='/eniq/sw/installer/wcdma_view_sql/'$var
	view_tmp=`echo "$sql" | cut -d. -f1`
	view=`echo "$view_tmp" | cut -d/ -f6`
	$ECHO "----------------------------- $view ------------------------------------" |$TEE -a ${log}

	######## Check if the view is existing and drop the view
	$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "if (object_id('dc.$view') is not null)
	BEGIN
		drop view dc.$view
	END"
	if [[ $? -eq 0 ]]; then
		$ECHO "Dropped existing view dc.$view" |$TEE -a ${log}
		######## Create the view
		$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" $sql
		if [[ $? -eq 0 ]]; then
			$ECHO "View  $view created" |$TEE -a ${log}
			$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "grant select on dc.$view to dcbo"
			$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "grant select on dc.$view to dc"
			$ECHO "SELECT permission granted for dc user on view dc.$view" |$TEE -a ${log}
			$ECHO "SELECT permission granted for dcbo user on view dc.$view" |$TEE -a ${log}
		else
			$ECHO "View dc.$view creation failed " |$TEE -a ${log}
		fi
	else
		$ECHO "Failed to drop the view dc.$view" |$TEE -a ${log}
	fi
						
	##Creation of dcpublic views
	## Dcpublic views should not be created for DC_E_RBS_RBSBH_RANKBH,DIM_E_RAN_WLE_RBS,DIM_E_RAN_WLE_UCELL
	##Hence restricting
			
	if [[ $view != "DIM_E_RAN_WLE_RBS" ]] && [[ $view != "DIM_E_RAN_WLE_UCELL" ]]; then	
		$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "execute dc.generate_combined_view_dcpublic $view;OUTPUT TO ${TEMP}/temp_rbs_view_def_dcpublic_${view}.txt" HEXADECIMAL ASIS FORMAT TEXT ;
		$SED 's/.//;s/.$//' ${TEMP}/temp_rbs_view_def_dcpublic_${view}.txt > ${TMP}/${view}_dcpublic
		$ECHO "where ROWSTATUS <> 'DUPLICATE' and ROWSTATUS <> 'SUSPECTED'" >> ${TMP}/${view}_dcpublic
			
		######## Check if the view is existing and drop the view
		$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "if (object_id('dcpublic.$view') is not null)
		BEGIN
			drop view dcpublic.$view
		END"
		if [[ $? -eq 0 ]]; then
			$ECHO "Dropped existing view dcpublic.$view" |$TEE -a ${log}
			######## Create the view
			$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" ${TMP}/${view}_dcpublic
			if [[ $? -eq 0 ]]; then
				$ECHO "View  dcpublic.$view created" |$TEE -a ${log}
				$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "grant select on dcpublic.$view to dcpublic"
				$ECHO "SELECT permission granted for dcpublic user on view dcpublic.$view" |$TEE -a ${log}
			else
				$ECHO "View  dcpublic.$view creation failed" |$TEE -a ${log}
			fi
		else
			$ECHO "Failed to drop the view $view" |$TEE -a ${log}
		fi
	fi
		
		$ECHO "------------------------------------" 
done < $1

}

writeCounters() 
{

declare -a counterList=("${!1}")
vname=$2

size=${#counterList[@]}
size=$((size-1)) 

if [[ "$vname" == *"RAW" ]]; then
	defaultColumns=(DATE_ID YEAR_ID MONTH_ID DAY_ID HOUR_ID DATETIME_ID MIN_ID TIMELEVEL SESSION_ID BATCH_ID PERIOD_DURATION ROWSTATUS DC_RELEASE DC_SOURCE DC_TIMEZONE DC_SUSPECTFLAG UTC_DATETIME_ID)
elif [[ "$vname" == *"DAY" ]]; then
	defaultColumns=(DATE_ID YEAR_ID MONTH_ID DAY_ID WEEK_ID DATACOVERAGE AGG_COUNT TIMELEVEL SESSION_ID BATCH_ID PERIOD_DURATION ROWSTATUS DC_RELEASE DC_SOURCE DC_TIMEZONE DC_SUSPECTFLAG)
elif [[ "$vname" == *"DAYBH" ]]; then
	defaultColumns=(DATE_ID YEAR_ID MONTH_ID DAY_ID MIN_ID BHTYPE BUSYHOUR BHCLASS TIMELEVEL SESSION_ID BATCH_ID PERIOD_DURATION ROWSTATUS DC_RELEASE DC_SOURCE DC_TIMEZONE DC_SUSPECTFLAG BH_ID OFFSET)
fi
#### Write the 17 default column names
for ((total=0; total<${#defaultColumns[@]}; total++)); do
	printf "${defaultColumns[$total]} , " >> ${RBSVIEWSQL}/$vname.sql
done
	
#### Write the G1 specific counters
for ((i=0; i< ${#counterList[@]}; i++)); do
	### Remove any special characters
	if [[ ${counterList[$i]} == *"*"* ]]; then
		counter="$(echo ${counterList[$i]} | sed 's/*/ /g')"
	else
		counter=${counterList[$i]}
	fi
		
	printf "$counter " >> ${RBSVIEWSQL}/$vname.sql	

	if [[ $i -ne $size ]]; then
		printf ", " >> ${RBSVIEWSQL}/$vname.sql
	fi
done
}

writeToFile()
{
viewname=$1_$2

#### Create statement first
printf "create view dc.$1_$2 as" >> ${RBSVIEWSQL}/$viewname.sql

$DBISQL -nogui -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD" "select TABLENAME from DWHPartition where TABLENAME like '${tableAlaises[0]}_$2[_]%';OUTPUT TO ${TMP}/tempText.txt"
sed "s/\'//g"  < ${TMP}/tempText.txt > ${TMP}/Db_result.txt

partitionNames=()
while IFS= read var
do
	partitionNames+=($var)
done < ${TMP}/Db_result.txt

totalPartition=${#partitionNames[@]}
#### select the counters from G1 Mo
for ((count=0; count<${totalPartition}; count++)); do
	printf "\n\nselect " >> ${RBSVIEWSQL}/$viewname.sql

	writeCounters g1counterList[@] ${viewname}
	printf "from dc.${partitionNames[$count]}" >> ${RBSVIEWSQL}/$viewname.sql
	printf " union all " >> ${RBSVIEWSQL}/$viewname.sql
	
done

printf "\n" >> ${RBSVIEWSQL}/$viewname.sql

### Iterate over the number of partitions for G2
$DBISQL -nogui -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD" "select TABLENAME from DWHPartition where TABLENAME like '${tableAlaises[1]}_$2[_]%';OUTPUT TO ${TMP}/tempText1.txt"
sed "s/\'//g"  < ${TMP}/tempText1.txt > ${TMP}/Db_result1.txt

partitionNamesG2=()
while IFS= read var
do
	partitionNamesG2+=($var)
done < ${TMP}/Db_result1.txt

totalG2Partition=${#partitionNamesG2[@]}

#### select the counters from G2 Mo
for ((count=0; count<${totalG2Partition}; count++)); do
	printf "\n\nselect " >> ${RBSVIEWSQL}/$viewname.sql

	writeCounters g2counterList[@] ${viewname}
	printf "from dc.${partitionNamesG2[$count]}" >> ${RBSVIEWSQL}/$viewname.sql
	total=$((totalG2Partition-1))
	
	if [[ $count -ne $total ]]; then
		printf " union all " >> ${RBSVIEWSQL}/$viewname.sql
	fi
	
done

$ECHO "File ${RBSVIEWSQL}/$viewname.sql created" |$TEE -a ${LOGFILE}
}

readMos()
{

## Create array to hold table aliases
tableAlaises=()
## Create two arrays for holding the counter names of G1 and G2 
g1counterList=()
g2counterList=()

view=
while IFS= read var
do

	view=DC_E_RBS_`echo "$var" | cut -d, -f1`
	newcounter=`echo "$var" | cut -d, -f2`
	g1mo=DC_E_RBS_`echo "$var" | cut -d, -f3`
	g1counter=`echo "$var" | cut -d, -f4`
	g2mo=DC_E_RBSG2_`echo "$var" | cut -d, -f5`
	g2counter=`echo "$var" | cut -d, -f6`
	
	g2counter="$(echo ${g2counter} | sed 's/;//g')"
	
	if [[  ${#tableAlaises[@]} -eq 0 ]]; then 	
		tableAlaises+=($g1mo)
		tableAlaises+=($g2mo)
	else 
		add $g1mo
		add $g2mo
	fi
		
	if [[ ${g1counter} == "NULL" ]]; then
		g1counter_new="NULL*as*$newcounter"
		g1counterList+=($g1counter_new)
	else
		g1counterList+=($g1counter)
	fi
	
	if [ ${g2counter} == ${newcounter} ]
	then
		g2counterList+=($g2counter)
	elif [ ${g2counter} != ${newcounter} ]
	then
		g2counter1="$g2counter*as*$newcounter"
		g2counterList+=($g2counter1)
	fi			
done < $1
echo "Writing to file"
for type in RAW DAY DAYBH
do
	writeToFile $view $type
done
}


############# Execution begins here ###################

## Check if both RBS and RBSG2 Techpacks are available
$DBISQL -nogui -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD" "select DISTINCT TECHPACK_NAME from Versioning WHERE TECHPACK_NAME like 'DC_E_RBS%';OUTPUT TO $TEMP/check.txt"

x=$($EGREP -c 'DC_E_RBS' $TEMP/check.txt)

if [[ $x -eq 2 ]]
then

	$ECHO "Reading the Config file " |$TEE -a ${LOGFILE}
	while IFS= read line
		do
			temp=`echo "$line" | cut -d, -f1`
			echo $line >> ${TMP}/$temp.txt
		
	done < <(more +2 ${INSTALLER_DIR}/WCDMACombinedViewConfigFile.csv)

	for file in ${TMP}/*
		do
			$ECHO "------------------------ Reading $file -------------------"  |$TEE -a ${LOGFILE}
			readMos $file
	done

	##Execute the generic stored procedure for dcpublic view creation
	$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}" ${INSTALLER_DIR}/dcpublic_wcdma.sql
	
	### Create the Busy hour Sql file

	BHViewname="DC_E_RBS_RBSBH_RANKBH"
	$DBISQL -nogui -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD" ${INSTALLER_DIR}/generate_rbs_combined_view.sql
	$DBISQL -nogui -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD" "execute generate_rbs_combined_view 'DC_E_RBS_RBSBH:RANKBH' , 'DC_E_RBSG2_RBSG2BH:RANKBH' , 'DC_E_RBS_RBSBH_RANKBH';OUTPUT TO ${RBSVIEWSQL}/temp.sql HEXADECIMAL ASIS FORMAT TEXT"
	sed 's/.//;s/.$//' ${RBSVIEWSQL}/temp.sql > ${RBSVIEWSQL}/$BHViewname.sql
	$ECHO "File ${RBSVIEWSQL}/$BHViewname.sql is created "  |$TEE -a ${LOGFILE}
	$RM ${RBSVIEWSQL}/temp.sql
	
	#### Create the DIM view sql file
	RANUCELLview="DIM_E_RAN_WLE_UCELL"
	$ECHO "create view "DC"."DIM_E_RAN_WLE_UCELL" as " >> ${RBSVIEWSQL}/$RANUCELLview.sql
	$ECHO "select "ucell"."LOCALCellID","ucell"."OSS_ID","ucell"."RBS_ID","ucell"."RNC_ID","ucell"."UCELL_ID","ucell"."UCELL_NAME","rbs"."managedElementType" " >> ${RBSVIEWSQL}/$RANUCELLview.sql
	$ECHO "from "DC"."DIM_E_RAN_UCELL" as "ucell","DC"."DIM_E_RAN_RBS" as "rbs" " >> ${RBSVIEWSQL}/$RANUCELLview.sql
	$ECHO "where "ucell"."OSS_ID" = "rbs"."OSS_ID" and "ucell"."RNC_ID" = "rbs"."RNC_ID" and "ucell"."RBS_ID" = "rbs"."RBS_ID" " >> ${RBSVIEWSQL}/$RANUCELLview.sql
	$ECHO "and "rbs"."managedElementType" not in ( 'RadioNode' ) " >> ${RBSVIEWSQL}/$RANUCELLview.sql
	$ECHO "File ${RBSVIEWSQL}/$RANUCELLview.sql is created "  |$TEE -a ${LOGFILE}
	
	RANRBSview="DIM_E_RAN_WLE_RBS"
	$ECHO "create view "DC"."DIM_E_RAN_WLE_RBS" as" >> ${RBSVIEWSQL}/$RANRBSview.sql
	$ECHO "select "rbs"."OSS_ID","rbs"."RBS_ID","rbs"."RNC_ID","rbs"."RBS_NAME","rnc"."RNC_NAME","rbs"."managedElementType"  " >> ${RBSVIEWSQL}/$RANRBSview.sql
	$ECHO "from "DC"."DIM_E_RAN_RBS" as "rbs", "DC"."DIM_E_RAN_RNC" as "rnc" where "rnc"."OSS_ID" = "rbs"."OSS_ID" " >> ${RBSVIEWSQL}/$RANRBSview.sql
	$ECHO "and "rnc"."RNC_ID" = "rbs"."RNC_ID" and "rbs"."managedElementType" not in ( 'RadioNode' ) " >> ${RBSVIEWSQL}/$RANRBSview.sql
	$ECHO "File ${RBSVIEWSQL}/$RANRBSview.sql is created "  |$TEE -a ${LOGFILE}
	
	ls ${RBSVIEWSQL} > ${TMP}/CheckCount.txt
	
	count=`cat ${TMP}/CheckCount.txt | wc -l`
	count=${count// /}
	count_half=$((count/2))
	count_half=${count_half// /}

	sed -n 1,${count_half}p ${TMP}/CheckCount.txt >> ${TMP}/thread1.txt
	sed -n `expr $((count_half+1))`,${count}p ${TMP}/CheckCount.txt >> ${TMP}/thread2.txt

	dropRecreate ${TMP}/thread1.txt  ${TMP}/Thread1Log.txt &
	dropRecreate ${TMP}/thread2.txt  ${TMP}/Thread2Log.txt &
	
	## wait for all the threads to complete its execution
	wait
	
	cat  ${TMP}/Thread1Log.txt  ${TMP}/Thread2Log.txt >> ${LOGFILE}
	
	## Check the invalid views.. Recompile and enable them	
	$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}" "select U.user_name + '.' + T.table_name from sysobject O, systab T, sysuser U where T.object_id = O.object_id and T.table_name like '%[_]PP%' and U.user_id = T.creatoR and O.status = 2 and O.object_type = 2;OUTPUT TO ${TMP}/invalidViews_tmp.txt"
	$SED s/\'//g ${TMP}/invalidViews_tmp.txt > ${TMP}/invalidViews.txt	
	while IFS= read var
	do
		echo $var
		$ECHO "Recompiling and Enabling the view $var" |$TEE -a ${LOGFILE}
		$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}"  "alter view $var recompile"
		$DBISQL -nogui -onerror exit -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}"  "alter view $var enable"
	done < ${TMP}/invalidViews.txt
	
	
else
	$ECHO "Either DC_E_RBS or DC_E_RBSG2 or both Techpack(s) is/are not installed. So skipping creation of combined views..." | $TEE -a ${LOGFILE}
fi

ENDTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
$ECHO "Execution ended at " $ENDTIMESTAMP >> ${LOGFILE}


### Remove all the temp directories created so far
$RM -rf ${TMP}
$RM -rf ${TEMP}

	
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\n$_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\n$_err_msg_\n"
fi
}
