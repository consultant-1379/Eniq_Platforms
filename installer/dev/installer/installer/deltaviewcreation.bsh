#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2015 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : deltaviewcreation.bsh
# Date    : 11/02/2016
# Purpose : Script to drop the existing Delta views and recreate them  
#           
# Usage   : deltaviewcreation.bsh
#
# ********************************************************************
#
# Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CP=/usr/bin/cp
DATE=/usr/bin/date
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
FIND=/usr/bin/find
GEGREP=/usr/sfw/bin/gegrep
GREP=/usr/bin/grep
MKDIR=/usr/bin/mkdir
NAWK=/usr/bin/nawk
RM=/usr/bin/rm
SED=/usr/bin/sed
SU=/usr/bin/su
TOUCH=/usr/bin/touch
UNZIP=/usr/bin/unzip
TEE=/usr/bin/tee

STARTTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`

SYBASE=/eniq/sybase_iq
export SYBASE

SQLANY=/eniq/sql_anywhere
export SQLANY
. ${SYBASE}/IQ.sh

LOGPATH=/eniq/log/sw_log/engine
export LOGPATH

INSTALLER_DIR=/eniq/sw/installer
export INSTALLER_DIR

LOGFILE=${LOGPATH}/delta_view_create_${STARTTIMESTAMP}.log
export LOGFILE

FAILEDVIEWSLOG=${LOGPATH}/failed_delta_views_${STARTTIMESTAMP}.log
export FAILEDVIEWSLOG

VIEWDEFSBCKUP=${LOGPATH}/delta_view_defs_backup
export VIEWDEFSBCKUP

DELTAVIEWSQL=${INSTALLER_DIR}/delta_view_sqls
export DELTAVIEWSQL

TMP=${INSTALLER_DIR}/temp_delta
export TMP

DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"


if [ ! -x "$DBISQL" ]; then
    _err_msg_="$DBISQL commands not found or not executable."
    abort_script "$_err_msg_"
fi

CONF_DIR=/eniq/sw/conf
if [ -z "$CONF_DIR" ] ; then
  echo "ERROR: CONF_DIR is not set"
  exit 1
fi

if [ -s /eniq/admin/lib/common_functions.lib ]; then
    . /eniq/admin/lib/common_functions.lib
else
        echo "Could not find /eniq/admin/lib/common_functions.lib"
        exit 1
fi

DWHDBPASSWORD=`inigetpassword DWH -v DCPassword -f ${CONF_DIR}/niq.ini`
DWHDB_PORT=`inigetpassword DWH -v PortNumber -f ${CONF_DIR}/niq.ini`
DWH_SERVER_NAME=`inigetpassword DWH -v ServerName -f ${CONF_DIR}/niq.ini`

DWHREPUSER=`inigetpassword REP -v DWHREPUsername -f ${CONF_DIR}/niq.ini`
DWHREPPASSWORD=`inigetpassword REP -v DWHREPPassword -f ${CONF_DIR}/niq.ini`
REP_PORT=`inigetpassword REP -v PortNumber -f ${CONF_DIR}/niq.ini`
REP_SERVER_NAME=`inigetpassword REP -v ServerName -f ${CONF_DIR}/niq.ini`
DBAPASSWORD=`inigetpassword DB -v DBAPassword -f ${CONF_DIR}/niq.ini`

$ECHO "Execution started at " $STARTTIMESTAMP >> ${LOGFILE}

runInParallel()
{

echo "$1"
#Modifying the view definition for all the delta views
while IFS= read line
do
	$ECHO "-------------------------------------$line----------------------------------------------------" 
	#Removing the single quotes in the string
	viewname=${line//\'}
	if [[ "$viewname" == "DC_E_TSS_TGC_GATEWAY_DELTA_1" ]] || [[ "$viewname" == "DC_E_TSS_TGC_GATEWAY_DELTA_2" ]];  then
		tview_tmp=${viewname%??}
		tableview=${tview_tmp/_DELTA/_RAW}
		get_partition_table $viewname $tableview $2
	else
		tablename=${viewname/_DELTA/_RAW}
		get_partition_table $viewname $tablename $2
	fi

	if [[ $? -eq 1 ]]; then
		drop_view $viewname $retryFailure $2
	else
		echo "Skipping Recreation.."
	fi
	
done < $1

}

usage()
{
   $ECHO "Usage: deltaviewcreation -d | -r <Name of the Delta View>"
   $ECHO "-d		To Drop and recreate the view passed as argument 2"
   $ECHO "-r		To Only recreate the view passed as argument 2"
}
recreate_view()
{
# Arguments
# $1 Path of the file that has the definition of the view to be created
# $2 Flag that enables writing to a file in case of error
# $3 Log file for the running thread

######## Create the view
$DBISQL -onerror exit -nogui -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}" $DELTAVIEWSQL/$1.sql
if [[ $? -eq 0 ]]; then
	$ECHO "View  $1 created " |$TEE -a ${3}
	$DBISQL -nogui -c "eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dba;pwd=${DBAPASSWORD}" "grant select on dc.$1 to dcbo"
	$ECHO "SELECT permission granted for dcbo user on view $1" >> ${3}
	$DBISQL -nogui -c "eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dba;pwd=${DBAPASSWORD}" "grant select on dc.$1 to dcpublic"
	$ECHO "SELECT permission granted for dcpublic user on view $1" >> ${3}
	
else
	if [[ $2 -eq 1 ]]; then
		$ECHO "-r , $1" >> ${3}
		$ECHO "Error while recreating the view $1" |$TEE -a ${3}
	else
		$ECHO "WARNING!!! Recreation of the view $1 failed.." |$TEE -a ${3}
	fi
fi

}

drop_view()
{
# Arguments
# $1 Name of the Delta view to be dropped
# $2 Flag that enables writing to a file in case of error
# $3 Log file for the running thread

######## Check if the view is existing and drop the view
$DBISQL -onerror exit -nogui -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}" "if (object_id('dc.$1') is not null)
BEGIN
	drop view $1
END"
if [[ $? -eq 0 ]]; then
	$ECHO "Dropped existing view $1" |$TEE -a ${3}
	recreate_view $1 $2 $3
else
	if [[ $2 -eq 1 ]]; then
		$ECHO "-d , $1" >> ${FAILEDVIEWSLOG}
		$ECHO "Error encountered while Dropping the view $1." |$TEE -a ${3}
	else
		$ECHO "WARNING!!! Dropping of the view $1 failed......."|$TEE -a ${3}
	fi
fi
}

get_partition_table()
{
# Arguments 
# $1 Delta_view name 
# $2 view name
# $3 log file name for the thread 

$DBISQL -nogui -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD" "select TABLENAME,STARTTIME,ENDTIME from DWHPartition where TABLENAME like'$2%';OUTPUT TO $TMP/tmppart_$1.txt"
	
curr_date=`$DATE +"%F %H:%M:%S"`
partition_name=
while IFS= read var
do
	partition_name_tmp=`$ECHO "$var" | cut -d, -f1`
	partition_name=${partition_name_tmp//\'}
	start_date=`$ECHO "$var" | cut -d, -f2 | sed 's/.000//g'`
	end_date=`$ECHO "$var" | cut -d, -f3 | sed 's/.000//g'`
	if [[  $end_date > $curr_date ]] && [[ $start_date < $curr_date ]] ; then
		echo "$partition_name "
		$ECHO "$partition_name is the partition table for the Delta view $1" >> ${3}
		break
	elif [[ $start_date = $curr_date ]] || [[  $end_date = $curr_date ]] ; then 
		echo "$partition_name "
		$ECHO "$partition_name is the partition table for the Delta view $1 " >> ${3}
		break
	else
		continue
	fi	
done < $TMP/tmppart_$1.txt 


### Modifying the view definition
$ECHO "Fetching the view definition for $1" >> ${3}
$DBISQL -nogui -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}" "select viewtext from SYSVIEWS where viewname like '$1'; OUTPUT TO $DELTAVIEWSQL/tmp_$1.sql HEXADECIMAL ASIS FORMAT TEXT QUOTE ''"
echo "Grep for $partition_name"
x=$($GREP -c "$partition_name" $DELTAVIEWSQL/tmp_$1.sql)

if [[ $x -eq 0 ]]
then
   flag=1
else 
   flag=0
fi

if [[ $flag -eq 1 ]]; then
	$ECHO "Making appropraite changes in the view definition for $1" >> ${3}
	#sed "s/\<$2\>/$partition_name/" $DELTAVIEWSQL/tmp_$1.sql > $DELTAVIEWSQL/$1.sql
	if grep "\<$2\>" "$DELTAVIEWSQL/tmp_$1.sql"; then
		sed "s/\<${2}\>/$partition_name/" $DELTAVIEWSQL/tmp_$1.sql > $DELTAVIEWSQL/$1_partial.sql
	else
        sed "s/"$2\_\[0-1][0-9]"/$partition_name/" $DELTAVIEWSQL/tmp_$1.sql > $DELTAVIEWSQL/$1_partial.sql
	fi
	
	$NAWK '{ printf "\n%s", $0 }BEGIN{printf "SET TEMPORARY OPTION QUOTED_IDENTIFIER = ON;"}END{ printf ";\n" }' $DELTAVIEWSQL/$1_partial.sql > $DELTAVIEWSQL/$1.sql
	$RM -rf $DELTAVIEWSQL/$1_partial.sql

	$ECHO "View definition at $DELTAVIEWSQL/$1.sql" >> ${3}
	return 1
else
	$ECHO "View definition for $1 is correct" |$TEE -a ${3} 
	return 0
fi
}

retry()
{
## If failed view file exists,retry once
if [[ -e ${FAILEDVIEWSLOG} ]];then
	retry=0
	while IFS= read var
		do
			operation=`$ECHO "$var" | cut -d, -f1`
			view=`$ECHO "$var" | cut -d, -f2`
			if [[ "$operation" -eq "-d" ]]; then
				drop_view $view $retry
			elif [[ "$operation" -eq "-r" ]]; then
				recreate_view $view  $retry
			fi
		done < ${FAILEDVIEWSLOG}	
fi
}

init()
{

#if [ ! -d ${VIEWDEFSBCKUP} ]; then


#fi

if [ ! -d ${LOGPATH} ] ; then
  $MKDIR -p ${LOGPATH}
  $CHMOD 777 ${LOGPATH}
fi

if [ ! -d ${TMP} ] ; then
  $MKDIR -p ${TMP}
  $CHMOD 777 ${TMP}
else
  $RM -rf ${TMP}
  $MKDIR -p ${TMP}
  $CHMOD 777 ${TMP}
fi 

if [ ! -d ${DELTAVIEWSQL} ] ; then
  $MKDIR -p ${DELTAVIEWSQL}
else
  $RM -rf ${DELTAVIEWSQL}
  $MKDIR -p ${DELTAVIEWSQL}
  $CHMOD 777 ${DELTAVIEWSQL}
fi 
}

### The execution starts here ######
if [[ $# -eq 0 ]]; then

	
	##Check if the flag file is present 
	YESTERDAY=`TZ=GMT+24 date +%Y%m%d`;
	
	if [[ -e ${INSTALLER_DIR}/flag_delta_$YESTERDAY ]]; then
		rm ${INSTALLER_DIR}/flag_delta_*
	fi
	
	init
	$ECHO "Retrieving the names of all the Delta views.." >> ${LOGFILE}
	$DBISQL -nogui -c "eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}" "select viewname from SYSVIEWS WHERE viewname like '%DELTA%';OUTPUT TO $TMP/tmpnew.txt"

	#This variable is set to 1 to enable retrying the creation of failed views
	retryFailure=1

	lineCount=`cat $TMP/tmpnew.txt | wc -l`
	num=`expr $((lineCount/4))`
	lastThreadtoExe=`expr $((lineCount%4))`
	
	num2=`expr $((num*2))`
	num3=`expr $((num*3))`
	num4=`expr $((num*4))`
	
	sed -n 1,${num}p $TMP/tmpnew.txt >> $TMP/tmp1.txt
	sed -n `expr $((num+1))`,${num2}p $TMP/tmpnew.txt >> $TMP/tmp2.txt
	sed -n `expr $((num2+1))`,${num3}p $TMP/tmpnew.txt >> $TMP/tmp3.txt
	sed -n `expr $((num3+1))`,${num4}p $TMP/tmpnew.txt >> $TMP/tmp4.txt 
	sed -n `expr $((num4+1))`,`expr $((num4+lastThreadtoExe))`p $TMP/tmpnew.txt >> $TMP/tmp5.txt
	
	runInParallel $TMP/tmp1.txt $TMP/thread1.log &
	runInParallel $TMP/tmp2.txt $TMP/thread2.log &
	runInParallel $TMP/tmp3.txt $TMP/thread3.log &
	runInParallel $TMP/tmp4.txt $TMP/thread4.log &
	runInParallel $TMP/tmp5.txt $TMP/thread5.log &
	
	#wait for all the threads to complete its execution
	wait
	
	#consolidate all the logs of the threads
	if [[ -f $TMP/thread5.log ]]; then
		cat $TMP/thread1.log $TMP/thread2.log $TMP/thread3.log $TMP/thread4.log $TMP/thread5.log >> ${LOGFILE}
	else
		cat $TMP/thread1.log $TMP/thread2.log $TMP/thread3.log $TMP/thread4.log  >> ${LOGFILE}
	fi
	
	#Check for any failure
	retry
elif [[ $# -eq 2 ]]; then
	#Flag is made 0 to disable retrying incase of failure
	flag=0
	##Read the first argument passed to the script
	if [[ "$1" == "-d" ]]; then
		drop_view $2 $flag
	elif [[ "$1" == "-r" ]]; then
		recreate_view $2 $flag
	else
		usage
	fi
else
	usage
fi

ENDTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
$ECHO "Execution ended at " $ENDTIMESTAMP >> ${LOGFILE}


###Create a flag_file on successful completion of the script
TODAY=`date +'%Y%m%d'`
touch ${INSTALLER_DIR}/flag_delta_$TODAY


#### Remove all the Temporary directories created so far
$RM -rf ${TMP}


### Function: abort_script ###
#
#   This is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\n$_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\n$_err_msg_\n"
fi
}
