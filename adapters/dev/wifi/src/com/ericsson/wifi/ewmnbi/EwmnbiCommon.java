// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ewmnbi_common.proto

package com.ericsson.wifi.ewmnbi;

public final class EwmnbiCommon {
  private EwmnbiCommon() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum NodeType
      implements com.google.protobuf.ProtocolMessageEnum {
    UNKNOWN_NODE(0, 0),
    BA200(1, 1),
    BA200D(2, 2),
    BA100(3, 3),
    BA100C(4, 4),
    BA100S(5, 5),
    BA100T(6, 6),
    BA100D(7, 7),
    BA100M(8, 8),
    BA100I(9, 9),
    BA50C(10, 10),
    BA50S(11, 11),
    BA20(12, 12),
    BA100SN(13, 13),
    BA100N(14, 14),
    BA20G(15, 15),
    BA20M(16, 16),
    BA100SNE(17, 17),
    BA20C(18, 18),
    BA20E(19, 19),
    BA20EO(20, 20),
    WIC8000(21, 21),
    AP5114(22, 22),
    AP5115(23, 23),
    AP5116(24, 24),
    AP5117(25, 25),
    AP5118(26, 26),
    AP5211(27, 27),
    AP5212(28, 28),
    AP5250(29, 29),
    AP5290(30, 30),
    AP6120(31, 31),
    WIC8051(32, 32),
    WIC8052(33, 33),
    WIC8030(34, 34),
    AP6401(35, 35),
    AP6321(36, 36),
    BA100SNEC(37, 37),
    AP5113(38, 38),
    WIC8100(39, 39),
    ;
    
    public static final int UNKNOWN_NODE_VALUE = 0;
    public static final int BA200_VALUE = 1;
    public static final int BA200D_VALUE = 2;
    public static final int BA100_VALUE = 3;
    public static final int BA100C_VALUE = 4;
    public static final int BA100S_VALUE = 5;
    public static final int BA100T_VALUE = 6;
    public static final int BA100D_VALUE = 7;
    public static final int BA100M_VALUE = 8;
    public static final int BA100I_VALUE = 9;
    public static final int BA50C_VALUE = 10;
    public static final int BA50S_VALUE = 11;
    public static final int BA20_VALUE = 12;
    public static final int BA100SN_VALUE = 13;
    public static final int BA100N_VALUE = 14;
    public static final int BA20G_VALUE = 15;
    public static final int BA20M_VALUE = 16;
    public static final int BA100SNE_VALUE = 17;
    public static final int BA20C_VALUE = 18;
    public static final int BA20E_VALUE = 19;
    public static final int BA20EO_VALUE = 20;
    public static final int WIC8000_VALUE = 21;
    public static final int AP5114_VALUE = 22;
    public static final int AP5115_VALUE = 23;
    public static final int AP5116_VALUE = 24;
    public static final int AP5117_VALUE = 25;
    public static final int AP5118_VALUE = 26;
    public static final int AP5211_VALUE = 27;
    public static final int AP5212_VALUE = 28;
    public static final int AP5250_VALUE = 29;
    public static final int AP5290_VALUE = 30;
    public static final int AP6120_VALUE = 31;
    public static final int WIC8051_VALUE = 32;
    public static final int WIC8052_VALUE = 33;
    public static final int WIC8030_VALUE = 34;
    public static final int AP6401_VALUE = 35;
    public static final int AP6321_VALUE = 36;
    public static final int BA100SNEC_VALUE = 37;
    public static final int AP5113_VALUE = 38;
    public static final int WIC8100_VALUE = 39;
    
    
    public final int getNumber() { return value; }
    
    public static NodeType valueOf(int value) {
      switch (value) {
        case 0: return UNKNOWN_NODE;
        case 1: return BA200;
        case 2: return BA200D;
        case 3: return BA100;
        case 4: return BA100C;
        case 5: return BA100S;
        case 6: return BA100T;
        case 7: return BA100D;
        case 8: return BA100M;
        case 9: return BA100I;
        case 10: return BA50C;
        case 11: return BA50S;
        case 12: return BA20;
        case 13: return BA100SN;
        case 14: return BA100N;
        case 15: return BA20G;
        case 16: return BA20M;
        case 17: return BA100SNE;
        case 18: return BA20C;
        case 19: return BA20E;
        case 20: return BA20EO;
        case 21: return WIC8000;
        case 22: return AP5114;
        case 23: return AP5115;
        case 24: return AP5116;
        case 25: return AP5117;
        case 26: return AP5118;
        case 27: return AP5211;
        case 28: return AP5212;
        case 29: return AP5250;
        case 30: return AP5290;
        case 31: return AP6120;
        case 32: return WIC8051;
        case 33: return WIC8052;
        case 34: return WIC8030;
        case 35: return AP6401;
        case 36: return AP6321;
        case 37: return BA100SNEC;
        case 38: return AP5113;
        case 39: return WIC8100;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<NodeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NodeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeType>() {
            public NodeType findValueByNumber(int number) {
              return NodeType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ericsson.wifi.ewmnbi.EwmnbiCommon.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final NodeType[] VALUES = {
      UNKNOWN_NODE, BA200, BA200D, BA100, BA100C, BA100S, BA100T, BA100D, BA100M, BA100I, BA50C, BA50S, BA20, BA100SN, BA100N, BA20G, BA20M, BA100SNE, BA20C, BA20E, BA20EO, WIC8000, AP5114, AP5115, AP5116, AP5117, AP5118, AP5211, AP5212, AP5250, AP5290, AP6120, WIC8051, WIC8052, WIC8030, AP6401, AP6321, BA100SNEC, AP5113, WIC8100, 
    };
    
    public static NodeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private NodeType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.ericsson.wifi.ewmnbi.NodeType)
  }
  
  public enum MoType
      implements com.google.protobuf.ProtocolMessageEnum {
    NODE(0, 1),
    CARD(1, 2),
    WIFI_ITF(2, 3),
    MESH_ITF(3, 4),
    WLAN(4, 5),
    MGMT_ITF(5, 6),
    TUNNEL_ENGINE(6, 7),
    TUNNEL(7, 8),
    CABLE_MODEM(8, 9),
    ETH_ITF(9, 10),
    CABLE_MODEM_DS_CH(10, 11),
    CABLE_MODEM_US_CH(11, 12),
    USB_MODEM(12, 13),
    ;
    
    public static final int NODE_VALUE = 1;
    public static final int CARD_VALUE = 2;
    public static final int WIFI_ITF_VALUE = 3;
    public static final int MESH_ITF_VALUE = 4;
    public static final int WLAN_VALUE = 5;
    public static final int MGMT_ITF_VALUE = 6;
    public static final int TUNNEL_ENGINE_VALUE = 7;
    public static final int TUNNEL_VALUE = 8;
    public static final int CABLE_MODEM_VALUE = 9;
    public static final int ETH_ITF_VALUE = 10;
    public static final int CABLE_MODEM_DS_CH_VALUE = 11;
    public static final int CABLE_MODEM_US_CH_VALUE = 12;
    public static final int USB_MODEM_VALUE = 13;
    
    
    public final int getNumber() { return value; }
    
    public static MoType valueOf(int value) {
      switch (value) {
        case 1: return NODE;
        case 2: return CARD;
        case 3: return WIFI_ITF;
        case 4: return MESH_ITF;
        case 5: return WLAN;
        case 6: return MGMT_ITF;
        case 7: return TUNNEL_ENGINE;
        case 8: return TUNNEL;
        case 9: return CABLE_MODEM;
        case 10: return ETH_ITF;
        case 11: return CABLE_MODEM_DS_CH;
        case 12: return CABLE_MODEM_US_CH;
        case 13: return USB_MODEM;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<MoType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MoType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MoType>() {
            public MoType findValueByNumber(int number) {
              return MoType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ericsson.wifi.ewmnbi.EwmnbiCommon.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final MoType[] VALUES = {
      NODE, CARD, WIFI_ITF, MESH_ITF, WLAN, MGMT_ITF, TUNNEL_ENGINE, TUNNEL, CABLE_MODEM, ETH_ITF, CABLE_MODEM_DS_CH, CABLE_MODEM_US_CH, USB_MODEM, 
    };
    
    public static MoType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private MoType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.ericsson.wifi.ewmnbi.MoType)
  }
  
  public enum EventSeverity
      implements com.google.protobuf.ProtocolMessageEnum {
    CLEAR(0, 1),
    CRITICAL(1, 2),
    MAJOR(2, 3),
    MINOR(3, 4),
    WARNING(4, 5),
    INFO(5, 6),
    UNKNOWN(6, 7),
    ;
    
    public static final int CLEAR_VALUE = 1;
    public static final int CRITICAL_VALUE = 2;
    public static final int MAJOR_VALUE = 3;
    public static final int MINOR_VALUE = 4;
    public static final int WARNING_VALUE = 5;
    public static final int INFO_VALUE = 6;
    public static final int UNKNOWN_VALUE = 7;
    
    
    public final int getNumber() { return value; }
    
    public static EventSeverity valueOf(int value) {
      switch (value) {
        case 1: return CLEAR;
        case 2: return CRITICAL;
        case 3: return MAJOR;
        case 4: return MINOR;
        case 5: return WARNING;
        case 6: return INFO;
        case 7: return UNKNOWN;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<EventSeverity>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EventSeverity>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventSeverity>() {
            public EventSeverity findValueByNumber(int number) {
              return EventSeverity.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ericsson.wifi.ewmnbi.EwmnbiCommon.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final EventSeverity[] VALUES = {
      CLEAR, CRITICAL, MAJOR, MINOR, WARNING, INFO, UNKNOWN, 
    };
    
    public static EventSeverity valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private EventSeverity(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.ericsson.wifi.ewmnbi.EventSeverity)
  }
  
  public enum EventType
      implements com.google.protobuf.ProtocolMessageEnum {
    UNKNOWN_EVENT(0, 0),
    TEMP_TOO_HIGH(1, 1),
    TEMP_READ_FAIL(2, 3),
    CARD_FAILED(3, 4),
    SNTP_SERVER_DOWN(4, 6),
    SOFTWARE_DOWNLOAD_IN_PROGRESS(5, 7),
    SOFTWARE_DOWNLOAD_FAILED(6, 8),
    TX_POWER_SET_TO_HIGH(7, 9),
    TX_POWER_SET_TO_LOW(8, 10),
    MANAGEMENT_SOFTWARE_RESTARTED(9, 12),
    LINK_DOWN(10, 15),
    BATTERY_IN_USE(11, 20),
    BATTERY_MISSING(12, 21),
    BATTERY_VOLTAGE_LOW(13, 22),
    BATTERY_IN_USE_AND_VOLTAGE_LOW(14, 23),
    BATTERY_VOLTAGE_CRITICALLY_LOW(15, 24),
    BATTERY_IN_USE_AND_VOLTAGE_CRITICALLY_LOW(16, 25),
    RADAR_DETECTED(17, 26),
    UNACKNOWLEDGED_CHANNEL_SWITCH(18, 27),
    PEER_INITIATED_CHANNEL_SWITCH(19, 28),
    PACKET_LOSS(20, 40),
    PACKET_LOSS_REMOTE(21, 41),
    INVALID_PACKETS(22, 42),
    PEER_NOT_ACTIVE(23, 43),
    EXCESS_PACKET_LOSS(24, 44),
    BUFFER_OVERRUN(25, 45),
    MESH_LINK_CHANGE(26, 46),
    MESH_POINT_OUT_OF_CONTACT(27, 47),
    UNKNOWN_MESH_POINT(28, 48),
    MANUAL_RESET(29, 49),
    ADMIN_DOWN(30, 50),
    COMMUNICATIONS_FAILED(31, 51),
    LINK_DOWN_STAR(32, 52),
    LINK_DOWN_P2P(33, 53),
    RADAR_BLACKOUT_PERIOD_END(34, 56),
    LINK_DOWN_REMOTE(35, 58),
    INTERFACE_DOWN(36, 59),
    TUNNEL_DOWN(37, 61),
    MAIN_TUNNEL_ACTIVE(38, 62),
    BACKUP_TUNNEL_ACTIVE(39, 63),
    SNMP_AUTHENTICATION_FAILURE(40, 65),
    PEER_NOT_RESPONDING(41, 66),
    PLL_LOCK_DETECT_FAILURE(42, 82),
    TX_POWER_FAIL(43, 83),
    NO_PRIMARY_LINK_AVAILABLE(44, 84),
    NO_SECONDARY_LINK_AVAILABLE(45, 85),
    PRIMARY_SECONDARY_LINK_SWITCHOVER(46, 86),
    SYSTEM_IP_ADDRESS_CHANGE(47, 88),
    CONFIG_CHANGED(48, 89),
    CM_IP_ADDRESS_CHANGE(49, 90),
    SECURE_MAC_SPOOF(50, 91),
    DHCP_ATTACK(51, 92),
    WIFI_CLIENT_AUTHENTICATED(52, 93),
    AUTHENTICATION_FAILURE(53, 98),
    TOPOLOGY_CHANGED(54, 99),
    UNSAVED_CONFIG_CHANGE(55, 100),
    AIM_LINK_DOWN(56, 103),
    MESH_MOBILE_LINK_CHANGE(57, 105),
    IP_ADDRESS_NOTIFICATION(58, 107),
    WIFI_CLIENT_DEAUTHENTICATED(59, 108),
    DEAUTH_DOS_ATTACK(60, 111),
    AUTOCONFIG_DOWNLOAD_FAILED(61, 112),
    BS_DOWN(62, 115),
    EXCESSIVE_TUNNEL_DOWN(63, 119),
    EXCESSIVE_CABLEMODEM_DOWN(64, 120),
    PRIMARY_TUNNEL_DOWN(65, 122),
    TUNNEL_AUTOCONFIG_FAILURE(66, 123),
    ETH_PORT_LINK_DOWN(67, 127),
    ETH_DUPLEX_MISMATCH(68, 128),
    FAN_SPEED_FAILURE(69, 129),
    FAN_EQUIPMENT_FAILURE(70, 130),
    LOCAL_CONFIGURATION_OVERRIDE(71, 131),
    DC_POWER_FAILURE(72, 134),
    ETHERNET_LOW_SPEED(73, 136),
    DHCP_BOOTFILE_DOWNLOAD_FAILURE(74, 137),
    DHCP_SERVER_OPT_ERROR(75, 138),
    DHCP_OPTION_ERROR(76, 139),
    SNMP_AGENT_UNREACHABLE(77, 10000),
    NODE_REBOOTING(78, 10001),
    MANAGEMENT_CONNECTION_DOWN(79, 10002),
    CONFIG_WRITE_FAILED(80, 10003),
    INTERMITTENT_MANAGEMENT_CONNECTION_DOWN(81, 10004),
    PERSISTENT_MANAGEMENT_CONNECTION_DOWN(82, 10005),
    DATACOLLECTOR_DOWN(83, 20001),
    NO_DATACOLLECTOR_AVAILABLE(84, 20002),
    TUNNEL_BALANCE_GROUP_FULL(85, 20003),
    TUNNEL_CONFIGURATION_CHANGED(86, 20004),
    NO_AVALAILABLE_SECONDARY(87, 20005),
    AUTO_UPGRADE_STARTED(88, 20006),
    NO_TUNNEL_BALANCE_GROUP(89, 20007),
    NEW_HONEYPOTS_DETECTED(90, 20008),
    STATS_EXPORT_FOLDER_UNAVAILABLE(91, 20009),
    STATS_EXPORT_FAILED(92, 20010),
    INVENTORY_EXPORT_FOLDER_UNAVAILABLE(93, 20011),
    INVENTORY_EXPORT_FAILED(94, 20012),
    NBI_DOWN(95, 20015),
    STATS_FOLDER_CAPACITY_THRESHOLD_EXCEEDED(96, 20016),
    NBI_SERVER_CONNECTION_DOWN(97, 20017),
    NO_AVAILABLE_STANDBY(98, 20018),
    STANDBY_IN_USE(99, 20019),
    INCOMPATIBLE_CONFIG_CHANGE(100, 20021),
    STANDBY_SERVER_DOWN(101, 20022),
    SWITCH_ACTIVITY(102, 20023),
    TIME_MISMATCH(103, 20024),
    TS_LOST_CONNECTION_TO_LOCATOR(104, 20501),
    TS_LOST_CONNECTION_TO_3GPP_CONTROLLER(105, 20502),
    TS_NO_LOCATORS_CONFIGURED_FOR_UE(106, 20503),
    TS_IMSI_DATABASE_NEAR_CAPACITY(107, 20504),
    TS_POSSIBLE_MISCONFIGURATION_OF_LOCATOR_ADDRESSES(108, 20505),
    NBI_HEARTBEAT(109, 30000),
    NE_CHANGED(110, 30001),
    NE_DELETED(111, 30002),
    WLAN_CHANGED(112, 30003),
    ;
    
    public static final int UNKNOWN_EVENT_VALUE = 0;
    public static final int TEMP_TOO_HIGH_VALUE = 1;
    public static final int TEMP_READ_FAIL_VALUE = 3;
    public static final int CARD_FAILED_VALUE = 4;
    public static final int SNTP_SERVER_DOWN_VALUE = 6;
    public static final int SOFTWARE_DOWNLOAD_IN_PROGRESS_VALUE = 7;
    public static final int SOFTWARE_DOWNLOAD_FAILED_VALUE = 8;
    public static final int TX_POWER_SET_TO_HIGH_VALUE = 9;
    public static final int TX_POWER_SET_TO_LOW_VALUE = 10;
    public static final int MANAGEMENT_SOFTWARE_RESTARTED_VALUE = 12;
    public static final int LINK_DOWN_VALUE = 15;
    public static final int BATTERY_IN_USE_VALUE = 20;
    public static final int BATTERY_MISSING_VALUE = 21;
    public static final int BATTERY_VOLTAGE_LOW_VALUE = 22;
    public static final int BATTERY_IN_USE_AND_VOLTAGE_LOW_VALUE = 23;
    public static final int BATTERY_VOLTAGE_CRITICALLY_LOW_VALUE = 24;
    public static final int BATTERY_IN_USE_AND_VOLTAGE_CRITICALLY_LOW_VALUE = 25;
    public static final int RADAR_DETECTED_VALUE = 26;
    public static final int UNACKNOWLEDGED_CHANNEL_SWITCH_VALUE = 27;
    public static final int PEER_INITIATED_CHANNEL_SWITCH_VALUE = 28;
    public static final int PACKET_LOSS_VALUE = 40;
    public static final int PACKET_LOSS_REMOTE_VALUE = 41;
    public static final int INVALID_PACKETS_VALUE = 42;
    public static final int PEER_NOT_ACTIVE_VALUE = 43;
    public static final int EXCESS_PACKET_LOSS_VALUE = 44;
    public static final int BUFFER_OVERRUN_VALUE = 45;
    public static final int MESH_LINK_CHANGE_VALUE = 46;
    public static final int MESH_POINT_OUT_OF_CONTACT_VALUE = 47;
    public static final int UNKNOWN_MESH_POINT_VALUE = 48;
    public static final int MANUAL_RESET_VALUE = 49;
    public static final int ADMIN_DOWN_VALUE = 50;
    public static final int COMMUNICATIONS_FAILED_VALUE = 51;
    public static final int LINK_DOWN_STAR_VALUE = 52;
    public static final int LINK_DOWN_P2P_VALUE = 53;
    public static final int RADAR_BLACKOUT_PERIOD_END_VALUE = 56;
    public static final int LINK_DOWN_REMOTE_VALUE = 58;
    public static final int INTERFACE_DOWN_VALUE = 59;
    public static final int TUNNEL_DOWN_VALUE = 61;
    public static final int MAIN_TUNNEL_ACTIVE_VALUE = 62;
    public static final int BACKUP_TUNNEL_ACTIVE_VALUE = 63;
    public static final int SNMP_AUTHENTICATION_FAILURE_VALUE = 65;
    public static final int PEER_NOT_RESPONDING_VALUE = 66;
    public static final int PLL_LOCK_DETECT_FAILURE_VALUE = 82;
    public static final int TX_POWER_FAIL_VALUE = 83;
    public static final int NO_PRIMARY_LINK_AVAILABLE_VALUE = 84;
    public static final int NO_SECONDARY_LINK_AVAILABLE_VALUE = 85;
    public static final int PRIMARY_SECONDARY_LINK_SWITCHOVER_VALUE = 86;
    public static final int SYSTEM_IP_ADDRESS_CHANGE_VALUE = 88;
    public static final int CONFIG_CHANGED_VALUE = 89;
    public static final int CM_IP_ADDRESS_CHANGE_VALUE = 90;
    public static final int SECURE_MAC_SPOOF_VALUE = 91;
    public static final int DHCP_ATTACK_VALUE = 92;
    public static final int WIFI_CLIENT_AUTHENTICATED_VALUE = 93;
    public static final int AUTHENTICATION_FAILURE_VALUE = 98;
    public static final int TOPOLOGY_CHANGED_VALUE = 99;
    public static final int UNSAVED_CONFIG_CHANGE_VALUE = 100;
    public static final int AIM_LINK_DOWN_VALUE = 103;
    public static final int MESH_MOBILE_LINK_CHANGE_VALUE = 105;
    public static final int IP_ADDRESS_NOTIFICATION_VALUE = 107;
    public static final int WIFI_CLIENT_DEAUTHENTICATED_VALUE = 108;
    public static final int DEAUTH_DOS_ATTACK_VALUE = 111;
    public static final int AUTOCONFIG_DOWNLOAD_FAILED_VALUE = 112;
    public static final int BS_DOWN_VALUE = 115;
    public static final int EXCESSIVE_TUNNEL_DOWN_VALUE = 119;
    public static final int EXCESSIVE_CABLEMODEM_DOWN_VALUE = 120;
    public static final int PRIMARY_TUNNEL_DOWN_VALUE = 122;
    public static final int TUNNEL_AUTOCONFIG_FAILURE_VALUE = 123;
    public static final int ETH_PORT_LINK_DOWN_VALUE = 127;
    public static final int ETH_DUPLEX_MISMATCH_VALUE = 128;
    public static final int FAN_SPEED_FAILURE_VALUE = 129;
    public static final int FAN_EQUIPMENT_FAILURE_VALUE = 130;
    public static final int LOCAL_CONFIGURATION_OVERRIDE_VALUE = 131;
    public static final int DC_POWER_FAILURE_VALUE = 134;
    public static final int ETHERNET_LOW_SPEED_VALUE = 136;
    public static final int DHCP_BOOTFILE_DOWNLOAD_FAILURE_VALUE = 137;
    public static final int DHCP_SERVER_OPT_ERROR_VALUE = 138;
    public static final int DHCP_OPTION_ERROR_VALUE = 139;
    public static final int SNMP_AGENT_UNREACHABLE_VALUE = 10000;
    public static final int NODE_REBOOTING_VALUE = 10001;
    public static final int MANAGEMENT_CONNECTION_DOWN_VALUE = 10002;
    public static final int CONFIG_WRITE_FAILED_VALUE = 10003;
    public static final int INTERMITTENT_MANAGEMENT_CONNECTION_DOWN_VALUE = 10004;
    public static final int PERSISTENT_MANAGEMENT_CONNECTION_DOWN_VALUE = 10005;
    public static final int DATACOLLECTOR_DOWN_VALUE = 20001;
    public static final int NO_DATACOLLECTOR_AVAILABLE_VALUE = 20002;
    public static final int TUNNEL_BALANCE_GROUP_FULL_VALUE = 20003;
    public static final int TUNNEL_CONFIGURATION_CHANGED_VALUE = 20004;
    public static final int NO_AVALAILABLE_SECONDARY_VALUE = 20005;
    public static final int AUTO_UPGRADE_STARTED_VALUE = 20006;
    public static final int NO_TUNNEL_BALANCE_GROUP_VALUE = 20007;
    public static final int NEW_HONEYPOTS_DETECTED_VALUE = 20008;
    public static final int STATS_EXPORT_FOLDER_UNAVAILABLE_VALUE = 20009;
    public static final int STATS_EXPORT_FAILED_VALUE = 20010;
    public static final int INVENTORY_EXPORT_FOLDER_UNAVAILABLE_VALUE = 20011;
    public static final int INVENTORY_EXPORT_FAILED_VALUE = 20012;
    public static final int NBI_DOWN_VALUE = 20015;
    public static final int STATS_FOLDER_CAPACITY_THRESHOLD_EXCEEDED_VALUE = 20016;
    public static final int NBI_SERVER_CONNECTION_DOWN_VALUE = 20017;
    public static final int NO_AVAILABLE_STANDBY_VALUE = 20018;
    public static final int STANDBY_IN_USE_VALUE = 20019;
    public static final int INCOMPATIBLE_CONFIG_CHANGE_VALUE = 20021;
    public static final int STANDBY_SERVER_DOWN_VALUE = 20022;
    public static final int SWITCH_ACTIVITY_VALUE = 20023;
    public static final int TIME_MISMATCH_VALUE = 20024;
    public static final int TS_LOST_CONNECTION_TO_LOCATOR_VALUE = 20501;
    public static final int TS_LOST_CONNECTION_TO_3GPP_CONTROLLER_VALUE = 20502;
    public static final int TS_NO_LOCATORS_CONFIGURED_FOR_UE_VALUE = 20503;
    public static final int TS_IMSI_DATABASE_NEAR_CAPACITY_VALUE = 20504;
    public static final int TS_POSSIBLE_MISCONFIGURATION_OF_LOCATOR_ADDRESSES_VALUE = 20505;
    public static final int NBI_HEARTBEAT_VALUE = 30000;
    public static final int NE_CHANGED_VALUE = 30001;
    public static final int NE_DELETED_VALUE = 30002;
    public static final int WLAN_CHANGED_VALUE = 30003;
    
    
    public final int getNumber() { return value; }
    
    public static EventType valueOf(int value) {
      switch (value) {
        case 0: return UNKNOWN_EVENT;
        case 1: return TEMP_TOO_HIGH;
        case 3: return TEMP_READ_FAIL;
        case 4: return CARD_FAILED;
        case 6: return SNTP_SERVER_DOWN;
        case 7: return SOFTWARE_DOWNLOAD_IN_PROGRESS;
        case 8: return SOFTWARE_DOWNLOAD_FAILED;
        case 9: return TX_POWER_SET_TO_HIGH;
        case 10: return TX_POWER_SET_TO_LOW;
        case 12: return MANAGEMENT_SOFTWARE_RESTARTED;
        case 15: return LINK_DOWN;
        case 20: return BATTERY_IN_USE;
        case 21: return BATTERY_MISSING;
        case 22: return BATTERY_VOLTAGE_LOW;
        case 23: return BATTERY_IN_USE_AND_VOLTAGE_LOW;
        case 24: return BATTERY_VOLTAGE_CRITICALLY_LOW;
        case 25: return BATTERY_IN_USE_AND_VOLTAGE_CRITICALLY_LOW;
        case 26: return RADAR_DETECTED;
        case 27: return UNACKNOWLEDGED_CHANNEL_SWITCH;
        case 28: return PEER_INITIATED_CHANNEL_SWITCH;
        case 40: return PACKET_LOSS;
        case 41: return PACKET_LOSS_REMOTE;
        case 42: return INVALID_PACKETS;
        case 43: return PEER_NOT_ACTIVE;
        case 44: return EXCESS_PACKET_LOSS;
        case 45: return BUFFER_OVERRUN;
        case 46: return MESH_LINK_CHANGE;
        case 47: return MESH_POINT_OUT_OF_CONTACT;
        case 48: return UNKNOWN_MESH_POINT;
        case 49: return MANUAL_RESET;
        case 50: return ADMIN_DOWN;
        case 51: return COMMUNICATIONS_FAILED;
        case 52: return LINK_DOWN_STAR;
        case 53: return LINK_DOWN_P2P;
        case 56: return RADAR_BLACKOUT_PERIOD_END;
        case 58: return LINK_DOWN_REMOTE;
        case 59: return INTERFACE_DOWN;
        case 61: return TUNNEL_DOWN;
        case 62: return MAIN_TUNNEL_ACTIVE;
        case 63: return BACKUP_TUNNEL_ACTIVE;
        case 65: return SNMP_AUTHENTICATION_FAILURE;
        case 66: return PEER_NOT_RESPONDING;
        case 82: return PLL_LOCK_DETECT_FAILURE;
        case 83: return TX_POWER_FAIL;
        case 84: return NO_PRIMARY_LINK_AVAILABLE;
        case 85: return NO_SECONDARY_LINK_AVAILABLE;
        case 86: return PRIMARY_SECONDARY_LINK_SWITCHOVER;
        case 88: return SYSTEM_IP_ADDRESS_CHANGE;
        case 89: return CONFIG_CHANGED;
        case 90: return CM_IP_ADDRESS_CHANGE;
        case 91: return SECURE_MAC_SPOOF;
        case 92: return DHCP_ATTACK;
        case 93: return WIFI_CLIENT_AUTHENTICATED;
        case 98: return AUTHENTICATION_FAILURE;
        case 99: return TOPOLOGY_CHANGED;
        case 100: return UNSAVED_CONFIG_CHANGE;
        case 103: return AIM_LINK_DOWN;
        case 105: return MESH_MOBILE_LINK_CHANGE;
        case 107: return IP_ADDRESS_NOTIFICATION;
        case 108: return WIFI_CLIENT_DEAUTHENTICATED;
        case 111: return DEAUTH_DOS_ATTACK;
        case 112: return AUTOCONFIG_DOWNLOAD_FAILED;
        case 115: return BS_DOWN;
        case 119: return EXCESSIVE_TUNNEL_DOWN;
        case 120: return EXCESSIVE_CABLEMODEM_DOWN;
        case 122: return PRIMARY_TUNNEL_DOWN;
        case 123: return TUNNEL_AUTOCONFIG_FAILURE;
        case 127: return ETH_PORT_LINK_DOWN;
        case 128: return ETH_DUPLEX_MISMATCH;
        case 129: return FAN_SPEED_FAILURE;
        case 130: return FAN_EQUIPMENT_FAILURE;
        case 131: return LOCAL_CONFIGURATION_OVERRIDE;
        case 134: return DC_POWER_FAILURE;
        case 136: return ETHERNET_LOW_SPEED;
        case 137: return DHCP_BOOTFILE_DOWNLOAD_FAILURE;
        case 138: return DHCP_SERVER_OPT_ERROR;
        case 139: return DHCP_OPTION_ERROR;
        case 10000: return SNMP_AGENT_UNREACHABLE;
        case 10001: return NODE_REBOOTING;
        case 10002: return MANAGEMENT_CONNECTION_DOWN;
        case 10003: return CONFIG_WRITE_FAILED;
        case 10004: return INTERMITTENT_MANAGEMENT_CONNECTION_DOWN;
        case 10005: return PERSISTENT_MANAGEMENT_CONNECTION_DOWN;
        case 20001: return DATACOLLECTOR_DOWN;
        case 20002: return NO_DATACOLLECTOR_AVAILABLE;
        case 20003: return TUNNEL_BALANCE_GROUP_FULL;
        case 20004: return TUNNEL_CONFIGURATION_CHANGED;
        case 20005: return NO_AVALAILABLE_SECONDARY;
        case 20006: return AUTO_UPGRADE_STARTED;
        case 20007: return NO_TUNNEL_BALANCE_GROUP;
        case 20008: return NEW_HONEYPOTS_DETECTED;
        case 20009: return STATS_EXPORT_FOLDER_UNAVAILABLE;
        case 20010: return STATS_EXPORT_FAILED;
        case 20011: return INVENTORY_EXPORT_FOLDER_UNAVAILABLE;
        case 20012: return INVENTORY_EXPORT_FAILED;
        case 20015: return NBI_DOWN;
        case 20016: return STATS_FOLDER_CAPACITY_THRESHOLD_EXCEEDED;
        case 20017: return NBI_SERVER_CONNECTION_DOWN;
        case 20018: return NO_AVAILABLE_STANDBY;
        case 20019: return STANDBY_IN_USE;
        case 20021: return INCOMPATIBLE_CONFIG_CHANGE;
        case 20022: return STANDBY_SERVER_DOWN;
        case 20023: return SWITCH_ACTIVITY;
        case 20024: return TIME_MISMATCH;
        case 20501: return TS_LOST_CONNECTION_TO_LOCATOR;
        case 20502: return TS_LOST_CONNECTION_TO_3GPP_CONTROLLER;
        case 20503: return TS_NO_LOCATORS_CONFIGURED_FOR_UE;
        case 20504: return TS_IMSI_DATABASE_NEAR_CAPACITY;
        case 20505: return TS_POSSIBLE_MISCONFIGURATION_OF_LOCATOR_ADDRESSES;
        case 30000: return NBI_HEARTBEAT;
        case 30001: return NE_CHANGED;
        case 30002: return NE_DELETED;
        case 30003: return WLAN_CHANGED;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<EventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EventType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
            public EventType findValueByNumber(int number) {
              return EventType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ericsson.wifi.ewmnbi.EwmnbiCommon.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final EventType[] VALUES = {
      UNKNOWN_EVENT, TEMP_TOO_HIGH, TEMP_READ_FAIL, CARD_FAILED, SNTP_SERVER_DOWN, SOFTWARE_DOWNLOAD_IN_PROGRESS, SOFTWARE_DOWNLOAD_FAILED, TX_POWER_SET_TO_HIGH, TX_POWER_SET_TO_LOW, MANAGEMENT_SOFTWARE_RESTARTED, LINK_DOWN, BATTERY_IN_USE, BATTERY_MISSING, BATTERY_VOLTAGE_LOW, BATTERY_IN_USE_AND_VOLTAGE_LOW, BATTERY_VOLTAGE_CRITICALLY_LOW, BATTERY_IN_USE_AND_VOLTAGE_CRITICALLY_LOW, RADAR_DETECTED, UNACKNOWLEDGED_CHANNEL_SWITCH, PEER_INITIATED_CHANNEL_SWITCH, PACKET_LOSS, PACKET_LOSS_REMOTE, INVALID_PACKETS, PEER_NOT_ACTIVE, EXCESS_PACKET_LOSS, BUFFER_OVERRUN, MESH_LINK_CHANGE, MESH_POINT_OUT_OF_CONTACT, UNKNOWN_MESH_POINT, MANUAL_RESET, ADMIN_DOWN, COMMUNICATIONS_FAILED, LINK_DOWN_STAR, LINK_DOWN_P2P, RADAR_BLACKOUT_PERIOD_END, LINK_DOWN_REMOTE, INTERFACE_DOWN, TUNNEL_DOWN, MAIN_TUNNEL_ACTIVE, BACKUP_TUNNEL_ACTIVE, SNMP_AUTHENTICATION_FAILURE, PEER_NOT_RESPONDING, PLL_LOCK_DETECT_FAILURE, TX_POWER_FAIL, NO_PRIMARY_LINK_AVAILABLE, NO_SECONDARY_LINK_AVAILABLE, PRIMARY_SECONDARY_LINK_SWITCHOVER, SYSTEM_IP_ADDRESS_CHANGE, CONFIG_CHANGED, CM_IP_ADDRESS_CHANGE, SECURE_MAC_SPOOF, DHCP_ATTACK, WIFI_CLIENT_AUTHENTICATED, AUTHENTICATION_FAILURE, TOPOLOGY_CHANGED, UNSAVED_CONFIG_CHANGE, AIM_LINK_DOWN, MESH_MOBILE_LINK_CHANGE, IP_ADDRESS_NOTIFICATION, WIFI_CLIENT_DEAUTHENTICATED, DEAUTH_DOS_ATTACK, AUTOCONFIG_DOWNLOAD_FAILED, BS_DOWN, EXCESSIVE_TUNNEL_DOWN, EXCESSIVE_CABLEMODEM_DOWN, PRIMARY_TUNNEL_DOWN, TUNNEL_AUTOCONFIG_FAILURE, ETH_PORT_LINK_DOWN, ETH_DUPLEX_MISMATCH, FAN_SPEED_FAILURE, FAN_EQUIPMENT_FAILURE, LOCAL_CONFIGURATION_OVERRIDE, DC_POWER_FAILURE, ETHERNET_LOW_SPEED, DHCP_BOOTFILE_DOWNLOAD_FAILURE, DHCP_SERVER_OPT_ERROR, DHCP_OPTION_ERROR, SNMP_AGENT_UNREACHABLE, NODE_REBOOTING, MANAGEMENT_CONNECTION_DOWN, CONFIG_WRITE_FAILED, INTERMITTENT_MANAGEMENT_CONNECTION_DOWN, PERSISTENT_MANAGEMENT_CONNECTION_DOWN, DATACOLLECTOR_DOWN, NO_DATACOLLECTOR_AVAILABLE, TUNNEL_BALANCE_GROUP_FULL, TUNNEL_CONFIGURATION_CHANGED, NO_AVALAILABLE_SECONDARY, AUTO_UPGRADE_STARTED, NO_TUNNEL_BALANCE_GROUP, NEW_HONEYPOTS_DETECTED, STATS_EXPORT_FOLDER_UNAVAILABLE, STATS_EXPORT_FAILED, INVENTORY_EXPORT_FOLDER_UNAVAILABLE, INVENTORY_EXPORT_FAILED, NBI_DOWN, STATS_FOLDER_CAPACITY_THRESHOLD_EXCEEDED, NBI_SERVER_CONNECTION_DOWN, NO_AVAILABLE_STANDBY, STANDBY_IN_USE, INCOMPATIBLE_CONFIG_CHANGE, STANDBY_SERVER_DOWN, SWITCH_ACTIVITY, TIME_MISMATCH, TS_LOST_CONNECTION_TO_LOCATOR, TS_LOST_CONNECTION_TO_3GPP_CONTROLLER, TS_NO_LOCATORS_CONFIGURED_FOR_UE, TS_IMSI_DATABASE_NEAR_CAPACITY, TS_POSSIBLE_MISCONFIGURATION_OF_LOCATOR_ADDRESSES, NBI_HEARTBEAT, NE_CHANGED, NE_DELETED, WLAN_CHANGED, 
    };
    
    public static EventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private EventType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.ericsson.wifi.ewmnbi.EventType)
  }
  
  public interface MoIdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .com.ericsson.wifi.ewmnbi.MoType moType = 1;
    boolean hasMoType();
    com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType getMoType();
    
    // optional string nodeMac = 2;
    boolean hasNodeMac();
    String getNodeMac();
    
    // optional uint32 slot = 3;
    boolean hasSlot();
    int getSlot();
    
    // optional uint32 port = 4;
    boolean hasPort();
    int getPort();
    
    // optional uint32 linkId = 5;
    boolean hasLinkId();
    int getLinkId();
    
    // optional uint32 wlanId = 6;
    boolean hasWlanId();
    int getWlanId();
    
    // optional uint32 idx = 7;
    boolean hasIdx();
    int getIdx();
    
    // optional uint32 tunnelEngine = 8;
    boolean hasTunnelEngine();
    int getTunnelEngine();
    
    // optional uint32 tunnel = 9;
    boolean hasTunnel();
    int getTunnel();
    
    // optional uint32 cmIdx = 10;
    boolean hasCmIdx();
    int getCmIdx();
    
    // optional uint32 chIdx = 11;
    boolean hasChIdx();
    int getChIdx();
    
    // optional uint32 pepIdx = 12;
    boolean hasPepIdx();
    int getPepIdx();
  }
  public static final class MoId extends
      com.google.protobuf.GeneratedMessage
      implements MoIdOrBuilder {
    // Use MoId.newBuilder() to construct.
    private MoId(Builder builder) {
      super(builder);
    }
    private MoId(boolean noInit) {}
    
    private static final MoId defaultInstance;
    public static MoId getDefaultInstance() {
      return defaultInstance;
    }
    
    public MoId getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ericsson.wifi.ewmnbi.EwmnbiCommon.internal_static_com_ericsson_wifi_ewmnbi_MoId_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ericsson.wifi.ewmnbi.EwmnbiCommon.internal_static_com_ericsson_wifi_ewmnbi_MoId_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .com.ericsson.wifi.ewmnbi.MoType moType = 1;
    public static final int MOTYPE_FIELD_NUMBER = 1;
    private com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType moType_;
    public boolean hasMoType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType getMoType() {
      return moType_;
    }
    
    // optional string nodeMac = 2;
    public static final int NODEMAC_FIELD_NUMBER = 2;
    private java.lang.Object nodeMac_;
    public boolean hasNodeMac() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getNodeMac() {
      java.lang.Object ref = nodeMac_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          nodeMac_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNodeMacBytes() {
      java.lang.Object ref = nodeMac_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        nodeMac_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional uint32 slot = 3;
    public static final int SLOT_FIELD_NUMBER = 3;
    private int slot_;
    public boolean hasSlot() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getSlot() {
      return slot_;
    }
    
    // optional uint32 port = 4;
    public static final int PORT_FIELD_NUMBER = 4;
    private int port_;
    public boolean hasPort() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getPort() {
      return port_;
    }
    
    // optional uint32 linkId = 5;
    public static final int LINKID_FIELD_NUMBER = 5;
    private int linkId_;
    public boolean hasLinkId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getLinkId() {
      return linkId_;
    }
    
    // optional uint32 wlanId = 6;
    public static final int WLANID_FIELD_NUMBER = 6;
    private int wlanId_;
    public boolean hasWlanId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getWlanId() {
      return wlanId_;
    }
    
    // optional uint32 idx = 7;
    public static final int IDX_FIELD_NUMBER = 7;
    private int idx_;
    public boolean hasIdx() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getIdx() {
      return idx_;
    }
    
    // optional uint32 tunnelEngine = 8;
    public static final int TUNNELENGINE_FIELD_NUMBER = 8;
    private int tunnelEngine_;
    public boolean hasTunnelEngine() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public int getTunnelEngine() {
      return tunnelEngine_;
    }
    
    // optional uint32 tunnel = 9;
    public static final int TUNNEL_FIELD_NUMBER = 9;
    private int tunnel_;
    public boolean hasTunnel() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public int getTunnel() {
      return tunnel_;
    }
    
    // optional uint32 cmIdx = 10;
    public static final int CMIDX_FIELD_NUMBER = 10;
    private int cmIdx_;
    public boolean hasCmIdx() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public int getCmIdx() {
      return cmIdx_;
    }
    
    // optional uint32 chIdx = 11;
    public static final int CHIDX_FIELD_NUMBER = 11;
    private int chIdx_;
    public boolean hasChIdx() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public int getChIdx() {
      return chIdx_;
    }
    
    // optional uint32 pepIdx = 12;
    public static final int PEPIDX_FIELD_NUMBER = 12;
    private int pepIdx_;
    public boolean hasPepIdx() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public int getPepIdx() {
      return pepIdx_;
    }
    
    private void initFields() {
      moType_ = com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType.NODE;
      nodeMac_ = "";
      slot_ = 0;
      port_ = 0;
      linkId_ = 0;
      wlanId_ = 0;
      idx_ = 0;
      tunnelEngine_ = 0;
      tunnel_ = 0;
      cmIdx_ = 0;
      chIdx_ = 0;
      pepIdx_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, moType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNodeMacBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, slot_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, port_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, linkId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, wlanId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, idx_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, tunnelEngine_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, tunnel_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, cmIdx_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, chIdx_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, pepIdx_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, moType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNodeMacBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, slot_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, port_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, linkId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, wlanId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, idx_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, tunnelEngine_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, tunnel_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, cmIdx_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, chIdx_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, pepIdx_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoIdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ericsson.wifi.ewmnbi.EwmnbiCommon.internal_static_com_ericsson_wifi_ewmnbi_MoId_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ericsson.wifi.ewmnbi.EwmnbiCommon.internal_static_com_ericsson_wifi_ewmnbi_MoId_fieldAccessorTable;
      }
      
      // Construct using com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        moType_ = com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType.NODE;
        bitField0_ = (bitField0_ & ~0x00000001);
        nodeMac_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        slot_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        linkId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        wlanId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        idx_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        tunnelEngine_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        tunnel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        cmIdx_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        chIdx_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        pepIdx_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId.getDescriptor();
      }
      
      public com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId getDefaultInstanceForType() {
        return com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId.getDefaultInstance();
      }
      
      public com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId build() {
        com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId buildPartial() {
        com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId result = new com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.moType_ = moType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.nodeMac_ = nodeMac_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.slot_ = slot_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.port_ = port_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.linkId_ = linkId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.wlanId_ = wlanId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.idx_ = idx_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.tunnelEngine_ = tunnelEngine_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.tunnel_ = tunnel_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.cmIdx_ = cmIdx_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.chIdx_ = chIdx_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.pepIdx_ = pepIdx_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId) {
          return mergeFrom((com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId other) {
        if (other == com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId.getDefaultInstance()) return this;
        if (other.hasMoType()) {
          setMoType(other.getMoType());
        }
        if (other.hasNodeMac()) {
          setNodeMac(other.getNodeMac());
        }
        if (other.hasSlot()) {
          setSlot(other.getSlot());
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        if (other.hasLinkId()) {
          setLinkId(other.getLinkId());
        }
        if (other.hasWlanId()) {
          setWlanId(other.getWlanId());
        }
        if (other.hasIdx()) {
          setIdx(other.getIdx());
        }
        if (other.hasTunnelEngine()) {
          setTunnelEngine(other.getTunnelEngine());
        }
        if (other.hasTunnel()) {
          setTunnel(other.getTunnel());
        }
        if (other.hasCmIdx()) {
          setCmIdx(other.getCmIdx());
        }
        if (other.hasChIdx()) {
          setChIdx(other.getChIdx());
        }
        if (other.hasPepIdx()) {
          setPepIdx(other.getPepIdx());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType value = com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                moType_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              nodeMac_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              slot_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              port_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              linkId_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              wlanId_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              idx_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              tunnelEngine_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              tunnel_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              cmIdx_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              chIdx_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              pepIdx_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .com.ericsson.wifi.ewmnbi.MoType moType = 1;
      private com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType moType_ = com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType.NODE;
      public boolean hasMoType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType getMoType() {
        return moType_;
      }
      public Builder setMoType(com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        moType_ = value;
        onChanged();
        return this;
      }
      public Builder clearMoType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        moType_ = com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoType.NODE;
        onChanged();
        return this;
      }
      
      // optional string nodeMac = 2;
      private java.lang.Object nodeMac_ = "";
      public boolean hasNodeMac() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getNodeMac() {
        java.lang.Object ref = nodeMac_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          nodeMac_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setNodeMac(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        nodeMac_ = value;
        onChanged();
        return this;
      }
      public Builder clearNodeMac() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nodeMac_ = getDefaultInstance().getNodeMac();
        onChanged();
        return this;
      }
      void setNodeMac(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        nodeMac_ = value;
        onChanged();
      }
      
      // optional uint32 slot = 3;
      private int slot_ ;
      public boolean hasSlot() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getSlot() {
        return slot_;
      }
      public Builder setSlot(int value) {
        bitField0_ |= 0x00000004;
        slot_ = value;
        onChanged();
        return this;
      }
      public Builder clearSlot() {
        bitField0_ = (bitField0_ & ~0x00000004);
        slot_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 port = 4;
      private int port_ ;
      public boolean hasPort() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getPort() {
        return port_;
      }
      public Builder setPort(int value) {
        bitField0_ |= 0x00000008;
        port_ = value;
        onChanged();
        return this;
      }
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        port_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 linkId = 5;
      private int linkId_ ;
      public boolean hasLinkId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getLinkId() {
        return linkId_;
      }
      public Builder setLinkId(int value) {
        bitField0_ |= 0x00000010;
        linkId_ = value;
        onChanged();
        return this;
      }
      public Builder clearLinkId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        linkId_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 wlanId = 6;
      private int wlanId_ ;
      public boolean hasWlanId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getWlanId() {
        return wlanId_;
      }
      public Builder setWlanId(int value) {
        bitField0_ |= 0x00000020;
        wlanId_ = value;
        onChanged();
        return this;
      }
      public Builder clearWlanId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wlanId_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 idx = 7;
      private int idx_ ;
      public boolean hasIdx() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getIdx() {
        return idx_;
      }
      public Builder setIdx(int value) {
        bitField0_ |= 0x00000040;
        idx_ = value;
        onChanged();
        return this;
      }
      public Builder clearIdx() {
        bitField0_ = (bitField0_ & ~0x00000040);
        idx_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 tunnelEngine = 8;
      private int tunnelEngine_ ;
      public boolean hasTunnelEngine() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public int getTunnelEngine() {
        return tunnelEngine_;
      }
      public Builder setTunnelEngine(int value) {
        bitField0_ |= 0x00000080;
        tunnelEngine_ = value;
        onChanged();
        return this;
      }
      public Builder clearTunnelEngine() {
        bitField0_ = (bitField0_ & ~0x00000080);
        tunnelEngine_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 tunnel = 9;
      private int tunnel_ ;
      public boolean hasTunnel() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public int getTunnel() {
        return tunnel_;
      }
      public Builder setTunnel(int value) {
        bitField0_ |= 0x00000100;
        tunnel_ = value;
        onChanged();
        return this;
      }
      public Builder clearTunnel() {
        bitField0_ = (bitField0_ & ~0x00000100);
        tunnel_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 cmIdx = 10;
      private int cmIdx_ ;
      public boolean hasCmIdx() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public int getCmIdx() {
        return cmIdx_;
      }
      public Builder setCmIdx(int value) {
        bitField0_ |= 0x00000200;
        cmIdx_ = value;
        onChanged();
        return this;
      }
      public Builder clearCmIdx() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cmIdx_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 chIdx = 11;
      private int chIdx_ ;
      public boolean hasChIdx() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public int getChIdx() {
        return chIdx_;
      }
      public Builder setChIdx(int value) {
        bitField0_ |= 0x00000400;
        chIdx_ = value;
        onChanged();
        return this;
      }
      public Builder clearChIdx() {
        bitField0_ = (bitField0_ & ~0x00000400);
        chIdx_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 pepIdx = 12;
      private int pepIdx_ ;
      public boolean hasPepIdx() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public int getPepIdx() {
        return pepIdx_;
      }
      public Builder setPepIdx(int value) {
        bitField0_ |= 0x00000800;
        pepIdx_ = value;
        onChanged();
        return this;
      }
      public Builder clearPepIdx() {
        bitField0_ = (bitField0_ & ~0x00000800);
        pepIdx_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.ericsson.wifi.ewmnbi.MoId)
    }
    
    static {
      defaultInstance = new MoId(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.ericsson.wifi.ewmnbi.MoId)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ericsson_wifi_ewmnbi_MoId_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ericsson_wifi_ewmnbi_MoId_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023ewmnbi_common.proto\022\030com.ericsson.wifi" +
      ".ewmnbi\"\346\001\n\004MoId\0220\n\006moType\030\001 \001(\0162 .com.e" +
      "ricsson.wifi.ewmnbi.MoType\022\017\n\007nodeMac\030\002 " +
      "\001(\t\022\014\n\004slot\030\003 \001(\r\022\014\n\004port\030\004 \001(\r\022\016\n\006linkI" +
      "d\030\005 \001(\r\022\016\n\006wlanId\030\006 \001(\r\022\013\n\003idx\030\007 \001(\r\022\024\n\014" +
      "tunnelEngine\030\010 \001(\r\022\016\n\006tunnel\030\t \001(\r\022\r\n\005cm" +
      "Idx\030\n \001(\r\022\r\n\005chIdx\030\013 \001(\r\022\016\n\006pepIdx\030\014 \001(\r" +
      "*\361\003\n\010NodeType\022\020\n\014UNKNOWN_NODE\020\000\022\t\n\005BA200" +
      "\020\001\022\n\n\006BA200D\020\002\022\t\n\005BA100\020\003\022\n\n\006BA100C\020\004\022\n\n" +
      "\006BA100S\020\005\022\n\n\006BA100T\020\006\022\n\n\006BA100D\020\007\022\n\n\006BA1",
      "00M\020\010\022\n\n\006BA100I\020\t\022\t\n\005BA50C\020\n\022\t\n\005BA50S\020\013\022" +
      "\010\n\004BA20\020\014\022\013\n\007BA100SN\020\r\022\n\n\006BA100N\020\016\022\t\n\005BA" +
      "20G\020\017\022\t\n\005BA20M\020\020\022\014\n\010BA100SNE\020\021\022\t\n\005BA20C\020" +
      "\022\022\t\n\005BA20E\020\023\022\n\n\006BA20EO\020\024\022\013\n\007WIC8000\020\025\022\n\n" +
      "\006AP5114\020\026\022\n\n\006AP5115\020\027\022\n\n\006AP5116\020\030\022\n\n\006AP5" +
      "117\020\031\022\n\n\006AP5118\020\032\022\n\n\006AP5211\020\033\022\n\n\006AP5212\020" +
      "\034\022\n\n\006AP5250\020\035\022\n\n\006AP5290\020\036\022\n\n\006AP6120\020\037\022\013\n" +
      "\007WIC8051\020 \022\013\n\007WIC8052\020!\022\013\n\007WIC8030\020\"\022\n\n\006" +
      "AP6401\020#\022\n\n\006AP6321\020$\022\r\n\tBA100SNEC\020%\022\n\n\006A" +
      "P5113\020&\022\013\n\007WIC8100\020\'*\312\001\n\006MoType\022\010\n\004NODE\020",
      "\001\022\010\n\004CARD\020\002\022\014\n\010WIFI_ITF\020\003\022\014\n\010MESH_ITF\020\004\022" +
      "\010\n\004WLAN\020\005\022\014\n\010MGMT_ITF\020\006\022\021\n\rTUNNEL_ENGINE" +
      "\020\007\022\n\n\006TUNNEL\020\010\022\017\n\013CABLE_MODEM\020\t\022\013\n\007ETH_I" +
      "TF\020\n\022\025\n\021CABLE_MODEM_DS_CH\020\013\022\025\n\021CABLE_MOD" +
      "EM_US_CH\020\014\022\r\n\tUSB_MODEM\020\r*b\n\rEventSeveri" +
      "ty\022\t\n\005CLEAR\020\001\022\014\n\010CRITICAL\020\002\022\t\n\005MAJOR\020\003\022\t" +
      "\n\005MINOR\020\004\022\013\n\007WARNING\020\005\022\010\n\004INFO\020\006\022\013\n\007UNKN" +
      "OWN\020\007*\267\030\n\tEventType\022\021\n\rUNKNOWN_EVENT\020\000\022\021" +
      "\n\rTEMP_TOO_HIGH\020\001\022\022\n\016TEMP_READ_FAIL\020\003\022\017\n" +
      "\013CARD_FAILED\020\004\022\024\n\020SNTP_SERVER_DOWN\020\006\022!\n\035",
      "SOFTWARE_DOWNLOAD_IN_PROGRESS\020\007\022\034\n\030SOFTW" +
      "ARE_DOWNLOAD_FAILED\020\010\022\030\n\024TX_POWER_SET_TO" +
      "_HIGH\020\t\022\027\n\023TX_POWER_SET_TO_LOW\020\n\022!\n\035MANA" +
      "GEMENT_SOFTWARE_RESTARTED\020\014\022\r\n\tLINK_DOWN" +
      "\020\017\022\022\n\016BATTERY_IN_USE\020\024\022\023\n\017BATTERY_MISSIN" +
      "G\020\025\022\027\n\023BATTERY_VOLTAGE_LOW\020\026\022\"\n\036BATTERY_" +
      "IN_USE_AND_VOLTAGE_LOW\020\027\022\"\n\036BATTERY_VOLT" +
      "AGE_CRITICALLY_LOW\020\030\022-\n)BATTERY_IN_USE_A" +
      "ND_VOLTAGE_CRITICALLY_LOW\020\031\022\022\n\016RADAR_DET" +
      "ECTED\020\032\022!\n\035UNACKNOWLEDGED_CHANNEL_SWITCH",
      "\020\033\022!\n\035PEER_INITIATED_CHANNEL_SWITCH\020\034\022\017\n" +
      "\013PACKET_LOSS\020(\022\026\n\022PACKET_LOSS_REMOTE\020)\022\023" +
      "\n\017INVALID_PACKETS\020*\022\023\n\017PEER_NOT_ACTIVE\020+" +
      "\022\026\n\022EXCESS_PACKET_LOSS\020,\022\022\n\016BUFFER_OVERR" +
      "UN\020-\022\024\n\020MESH_LINK_CHANGE\020.\022\035\n\031MESH_POINT" +
      "_OUT_OF_CONTACT\020/\022\026\n\022UNKNOWN_MESH_POINT\020" +
      "0\022\020\n\014MANUAL_RESET\0201\022\016\n\nADMIN_DOWN\0202\022\031\n\025C" +
      "OMMUNICATIONS_FAILED\0203\022\022\n\016LINK_DOWN_STAR" +
      "\0204\022\021\n\rLINK_DOWN_P2P\0205\022\035\n\031RADAR_BLACKOUT_" +
      "PERIOD_END\0208\022\024\n\020LINK_DOWN_REMOTE\020:\022\022\n\016IN",
      "TERFACE_DOWN\020;\022\017\n\013TUNNEL_DOWN\020=\022\026\n\022MAIN_" +
      "TUNNEL_ACTIVE\020>\022\030\n\024BACKUP_TUNNEL_ACTIVE\020" +
      "?\022\037\n\033SNMP_AUTHENTICATION_FAILURE\020A\022\027\n\023PE" +
      "ER_NOT_RESPONDING\020B\022\033\n\027PLL_LOCK_DETECT_F" +
      "AILURE\020R\022\021\n\rTX_POWER_FAIL\020S\022\035\n\031NO_PRIMAR" +
      "Y_LINK_AVAILABLE\020T\022\037\n\033NO_SECONDARY_LINK_" +
      "AVAILABLE\020U\022%\n!PRIMARY_SECONDARY_LINK_SW" +
      "ITCHOVER\020V\022\034\n\030SYSTEM_IP_ADDRESS_CHANGE\020X" +
      "\022\022\n\016CONFIG_CHANGED\020Y\022\030\n\024CM_IP_ADDRESS_CH" +
      "ANGE\020Z\022\024\n\020SECURE_MAC_SPOOF\020[\022\017\n\013DHCP_ATT",
      "ACK\020\\\022\035\n\031WIFI_CLIENT_AUTHENTICATED\020]\022\032\n\026" +
      "AUTHENTICATION_FAILURE\020b\022\024\n\020TOPOLOGY_CHA" +
      "NGED\020c\022\031\n\025UNSAVED_CONFIG_CHANGE\020d\022\021\n\rAIM" +
      "_LINK_DOWN\020g\022\033\n\027MESH_MOBILE_LINK_CHANGE\020" +
      "i\022\033\n\027IP_ADDRESS_NOTIFICATION\020k\022\037\n\033WIFI_C" +
      "LIENT_DEAUTHENTICATED\020l\022\025\n\021DEAUTH_DOS_AT" +
      "TACK\020o\022\036\n\032AUTOCONFIG_DOWNLOAD_FAILED\020p\022\013" +
      "\n\007BS_DOWN\020s\022\031\n\025EXCESSIVE_TUNNEL_DOWN\020w\022\035" +
      "\n\031EXCESSIVE_CABLEMODEM_DOWN\020x\022\027\n\023PRIMARY" +
      "_TUNNEL_DOWN\020z\022\035\n\031TUNNEL_AUTOCONFIG_FAIL",
      "URE\020{\022\026\n\022ETH_PORT_LINK_DOWN\020\177\022\030\n\023ETH_DUP" +
      "LEX_MISMATCH\020\200\001\022\026\n\021FAN_SPEED_FAILURE\020\201\001\022" +
      "\032\n\025FAN_EQUIPMENT_FAILURE\020\202\001\022!\n\034LOCAL_CON" +
      "FIGURATION_OVERRIDE\020\203\001\022\025\n\020DC_POWER_FAILU" +
      "RE\020\206\001\022\027\n\022ETHERNET_LOW_SPEED\020\210\001\022#\n\036DHCP_B" +
      "OOTFILE_DOWNLOAD_FAILURE\020\211\001\022\032\n\025DHCP_SERV" +
      "ER_OPT_ERROR\020\212\001\022\026\n\021DHCP_OPTION_ERROR\020\213\001\022" +
      "\033\n\026SNMP_AGENT_UNREACHABLE\020\220N\022\023\n\016NODE_REB" +
      "OOTING\020\221N\022\037\n\032MANAGEMENT_CONNECTION_DOWN\020" +
      "\222N\022\030\n\023CONFIG_WRITE_FAILED\020\223N\022,\n\'INTERMIT",
      "TENT_MANAGEMENT_CONNECTION_DOWN\020\224N\022*\n%PE" +
      "RSISTENT_MANAGEMENT_CONNECTION_DOWN\020\225N\022\030" +
      "\n\022DATACOLLECTOR_DOWN\020\241\234\001\022 \n\032NO_DATACOLLE" +
      "CTOR_AVAILABLE\020\242\234\001\022\037\n\031TUNNEL_BALANCE_GRO" +
      "UP_FULL\020\243\234\001\022\"\n\034TUNNEL_CONFIGURATION_CHAN" +
      "GED\020\244\234\001\022\036\n\030NO_AVALAILABLE_SECONDARY\020\245\234\001\022" +
      "\032\n\024AUTO_UPGRADE_STARTED\020\246\234\001\022\035\n\027NO_TUNNEL" +
      "_BALANCE_GROUP\020\247\234\001\022\034\n\026NEW_HONEYPOTS_DETE" +
      "CTED\020\250\234\001\022%\n\037STATS_EXPORT_FOLDER_UNAVAILA" +
      "BLE\020\251\234\001\022\031\n\023STATS_EXPORT_FAILED\020\252\234\001\022)\n#IN",
      "VENTORY_EXPORT_FOLDER_UNAVAILABLE\020\253\234\001\022\035\n" +
      "\027INVENTORY_EXPORT_FAILED\020\254\234\001\022\016\n\010NBI_DOWN" +
      "\020\257\234\001\022.\n(STATS_FOLDER_CAPACITY_THRESHOLD_" +
      "EXCEEDED\020\260\234\001\022 \n\032NBI_SERVER_CONNECTION_DO" +
      "WN\020\261\234\001\022\032\n\024NO_AVAILABLE_STANDBY\020\262\234\001\022\024\n\016ST" +
      "ANDBY_IN_USE\020\263\234\001\022 \n\032INCOMPATIBLE_CONFIG_" +
      "CHANGE\020\265\234\001\022\031\n\023STANDBY_SERVER_DOWN\020\266\234\001\022\025\n" +
      "\017SWITCH_ACTIVITY\020\267\234\001\022\023\n\rTIME_MISMATCH\020\270\234" +
      "\001\022#\n\035TS_LOST_CONNECTION_TO_LOCATOR\020\225\240\001\022+" +
      "\n%TS_LOST_CONNECTION_TO_3GPP_CONTROLLER\020",
      "\226\240\001\022&\n TS_NO_LOCATORS_CONFIGURED_FOR_UE\020" +
      "\227\240\001\022$\n\036TS_IMSI_DATABASE_NEAR_CAPACITY\020\230\240" +
      "\001\0227\n1TS_POSSIBLE_MISCONFIGURATION_OF_LOC" +
      "ATOR_ADDRESSES\020\231\240\001\022\023\n\rNBI_HEARTBEAT\020\260\352\001\022" +
      "\020\n\nNE_CHANGED\020\261\352\001\022\020\n\nNE_DELETED\020\262\352\001\022\022\n\014W" +
      "LAN_CHANGED\020\263\352\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_ericsson_wifi_ewmnbi_MoId_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_ericsson_wifi_ewmnbi_MoId_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ericsson_wifi_ewmnbi_MoId_descriptor,
              new java.lang.String[] { "MoType", "NodeMac", "Slot", "Port", "LinkId", "WlanId", "Idx", "TunnelEngine", "Tunnel", "CmIdx", "ChIdx", "PepIdx", },
              com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId.class,
              com.ericsson.wifi.ewmnbi.EwmnbiCommon.MoId.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
